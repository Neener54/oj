# oj.TryEditor.ojc

editorBorderColor = '#ffd272'
editorBackgroundColor = '#fefaf3'
editorBorderWidth = 2
editorPadding = 4
consolePadding = 4
phoneWidth = 696
maximizeDuration = 500

lineHeight = 21

makeCSS = null

SCRIPT = 'scr' + 'ipt'
TEXTJ = 'text="text/javascript"'

# Define plugin
module.exports = (oj, settings) ->

  TryEditor = createType 'TryEditor',
    base: ModelKeyView
    constructor: ->
      {options, args} = oj.unionArguments arguments

      # Create editor (readonly)
      @_editor = new AceEditor
        c: 'oj-TryEditor-input-editor'
        theme: 'orange'
        mode:'ojc'
        fontSize: 15
        tabSize: 2
        behaviorsEnabled: true
        useSoftTabs: true
        showGutter: false
        highlightActiveLine: false
        showPrintMargin: false
        readOnly: false
        showIndentGuides: false
        change: => @editorChanged.apply @, arguments

      # Create element
      @el = oj =>
        div =>

          div c:'oj-TryEditor-resizer', ->
            div c:'oj-TryEditor-gripper'

          div c:'oj-TryEditor-inputs', =>
            div c:'oj-TryEditor-bar', ->
              div c:'oj-TryEditor-bar-states', ->
                div c:'oj-TryEditor-bar-state cs', 'CS', title:'Use CoffeeScript'
                div c:'oj-TryEditor-bar-state js selected', 'JS', title:'Use JavaScript'

            @editor.emit() # oj-TryEditor-input-editor
          div c:'oj-TryEditor-outputs', ->
            div c:'oj-TryEditor-console'
            iframe()
            div c:'oj-TryEditor-bar', ->
              div c:'oj-TryEditor-bar-maximize', title:'Maximize'
          div c:'oj-TryEditor-seperator'

      # Remember some references to keep stuff reasonable
      @$inputs = @$ '.oj-TryEditor-inputs'
      @$input = @$ '.oj-TryEditor-input-editor'
      @$outputs = @$ '.oj-TryEditor-outputs'
      @$seperator = @$ '.oj-TryEditor-seperator'
      @$resizer = @$ '.oj-TryEditor-resizer'
      @$console = @$ '.oj-TryEditor-console'
      @$gripper = @$ '.oj-TryEditor-gripper'

      @$jsButton = @$ '.oj-TryEditor-bar-state.js'
      @$csButton = @$ '.oj-TryEditor-bar-state.cs'
      @$maximizeButton = @$ '.oj-TryEditor-bar-maximize'

      # Set value from argument
      if args.length > 0
        @value = args[0]

      @state = oj.argumentShift(options, 'state') ? 'js'
      @js = oj.argumentShift(options,'js') if options.js?
      @cs = oj.argumentShift(options,'cs') if options.cs?

      @minWidth = oj.argumentShift(options, 'minWidth') ? 400
      @minHeight = oj.argumentShift(options, 'minHeight') ? (lineHeight * 1 + 2 * editorPadding)

      @width = oj.argumentShift(options, 'width')
      @height = oj.argumentShift(options, 'height')

      @split = oj.argumentShift(options, 'split') ? 0.5

      @lineCount = oj.argumentShift(options, 'lineCount') ? 'fit'

      @maximize = oj.argumentShift(options, 'maximize') ? false

      TryEditor.base.constructor.apply @, [options]

      # Bind any events
      @_bindEvents()

    properties:

      width:
        get: -> @$el.width()

      height:
        get: -> @_height ? @minHeight
        set: (v) -> @_height = v; @updateFrame()

      lineCount:
        get: -> @_lineCount
        set: (v) ->
          @_lineCount = v
          # Set lineCount to 'fit' and it will automatically figure it out
          lineCount = 1
          if v == 'fit' and @value?
            # Fit to whichever is bigger @cs or @js
            lineCount = Math.max (@cs?.split(/\r\n|\r|\n/)?.length) || 1, (@js?.split(/\r\n|\r|\n/)?.length || 1)

          else if oj.isNumber v
            lineCount = v

          # Adjust height to lineCount
          @height = lineCount * lineHeight + editorPadding * 2 + 4
          return
      # split ratio from 0-1
      split:
        get: -> @_split
        set: (v) ->
          @_split = v;
          @updateFrame()

      editor:
        get: -> @_editor

      # Accessor to editor.value
      value:
        get: -> @editor.value
        set: (v) ->
          @editor.value = v
          if @state == 'cs'
            @_cs = v
          else
            @_js = v

      # Adjust the js value
      js:
        get: -> @_js
        set: (v) -> @_js = v; @updateValue()

      # Adjust the cs value
      cs:
        get: -> @_cs
        set: (v) -> @_cs = v; @updateValue()

      # Display 'cs' or 'js'
      state:
        get: -> @_state
        set: (v) ->
          @_state = v;
          if v == 'js'
            @editor.mode = 'oj'
            @$jsButton.addClass 'selected'
            @$csButton.removeClass 'selected'
          else
            @editor.mode = 'ojc'
            @$jsButton.removeClass 'selected'
            @$csButton.addClass 'selected'

          @updateValue()

      mode:
        get: -> @editor.mode
        set: (v) -> @editor.mode = v

      fit:
        get: -> @_fit ? true
        set: (v) -> @_fit = v

      maximize:
        get: -> @_maximize ? false
        set: (v) ->
          @_maximize = v

          return unless @isInserted

          if v
            pos = @$el.offset()
            pos.top -= $(window).scrollTop()
            pos.left -= $(window).scrollLeft()

            @_prevWidth = @width
            @_prevHeight = @height
            @_prevTop = pos.top
            @_prevLeft = pos.left
            @_prevZIndex = @$el.css 'z-index'

            # Change to using fixed positioning
            @$el.css
              position:'fixed'
              top:pos.top
              left:pos.left
              zIndex: 1000

            # Disable scrolling
            $('body').css
              overflow:'hidden'

            @$el.animate({top:0, height:'100%'}, {
              progress: =>
                @height = @$el.height()
              complete: =>
                @$el.animate({left:0, width:'100%'},{
                  duration: maximizeDuration
                })
              duration: maximizeDuration
            })

            @$gripper.hide()

          else

            @$el.animate({left:@_prevLeft, width:@_prevWidth}, {
              duration: maximizeDuration
              complete: =>
                @$el.animate({top:@_prevTop, height: @_prevHeight},{
                  progress: =>
                    @height = @$el.height()
                  complete: =>
                    @$el.css
                      position:'relative'
                      top:''
                      left:''
                  duration: maximizeDuration
                })
            })

            @$gripper.show()


            # Enable scrolling
            $('body').css
              overflow:'auto'

      cs: ''
      js: ''
      css: ''
      html: ''

      $inputs: null
      $input: null
      $outputs: null
      $output: get: -> @$ '.oj-TryEditor-outputs > iframe'
      $seperator: null
      $resizer: null
      $console: null
      $gripper: null

      $jsButton: null
      $csButton: null
      $maximizeButton: null

      _scriptTagsLast: null

    methods:
      toggleState: ->
        @state = if @state == 'js' then 'cs' else 'js'

      # Detect editor changes
      editorChanged: ->
        if @state == 'js'
          @_js = @value
        else
          @_cs = @value
        @recompile()

      valueChanged: ->
        TryEditor.base.valueChanged.apply @, arguments

      windowResized: (innerWidth, innerHeight) ->
        if @maximize
          @height = innerHeight - editorBorderWidth * 2

      # Given values and state recompile everything
      updateValue: ->
        if @state == 'js'
          @mode = 'oj'
          @value = @js
        else
          @mode = 'ojc'
          @value = @cs
        @recompile()

      # Given width/height/split recalculate everything
      updateFrame: ->

        w = @width
        h = @height

        @$resizer.width w

        @editor.height = h - editorPadding * 2
        @$inputs.height h
        @$outputs.height h

        # iphone
        if w < phoneWidth
          @$inputs.css display:'block'

          # The input
          @editor.width = w - editorPadding * 2

          # The output
          @$outputs.width w
          @$output.width w
          @$output.height h - editorPadding

          @$console.height h - 2 * consolePadding
          @$console.width w - 2 * consolePadding

          # Seperator
          @$seperator.hide()

          @$outputs.css 'border-top':"#{editorBorderWidth}px solid #{editorBorderColor}"

          # resizer
          if Math.abs(h / 2 - @$resizer.height()) > 10
            @$resizer.height h * 2

          @$el.height h * 2

        else
          @$inputs.css display:'inline-block'

          # The editor
          @editor.width = w / 2 - editorPadding * 2

          # The output
          @$outputs.css('border-top':'')
          @$outputs.height h
          @$outputs.width w / 2
          @$output.width w / 2
          @$output.height h
          @$console.width w / 2 - 2 * consolePadding
          @$console.height h - 2 * consolePadding

          # The seperator
          @$seperator.show()
          @$seperator.height @height
          @$seperator.css('left', Math.floor(@width*@split))

          if Math.abs(h - @$resizer.height()) > 10
            @$resizer.height h

          @$el.height h

      # Positioning can only happen once inserted
      inserted: ->
        TryEditor.base.inserted.apply @, arguments

        @lineCount = @lineCount
        @editor.height = @height

        # Maximize instantly if it defaulted that way
        d = maximizeDuration
        maximizeDuration = 0
        @maximize = @maximize
        maximizeDuration = d

        # For perf reasons briefly delay frame update
        setTimeout (=> @updateFrame()), 50

      consoleError: (message) ->
        if @isConstructed
          @$console.html message
          @$console.show()
        return

      consoleSuccess: ->
        if @isConstructed
          @$console.hide()
        return

      recompile: ->
        # Do nothing if we aren't inserted yet (no place to output to)
        return unless @isInserted
        code = @value

        # Compile coffee SCRIPT to javascript
        if @state == 'cs'
          try
            code = CoffeeScript.compile code, bare:true
          catch eCoffee
            # Set console message
            @consoleError "CoffeeScript Error: #{eCoffee.message}"
            return

        # Compile the code to check for errors
        # try
        #   results = oj.compile html:1,css:1, eval("oj(function(){#{code}});")

        # catch eCompile
        #   @consoleError "#{eCompile.toString()}"
        #   return

        # Calculate what scripts the plugins need.
        scriptTags = _calculateScripts code, _pluginScripts

        # If they change replace the iframe, otherwise just update it.
        # This is necessary because iframe creating is amazingly slow
        if scriptTags == @_scriptTagsLast
          _updateIFRAME @$output, code
        else
          @_scriptTagsLast = scriptTags
          _replaceIFRAME @$outputs, @$output, scriptTags, code

        @consoleSuccess()

      _bindEvents: ->

        # Bind js and css buttons
        @$jsButton.click => @state = 'js'
        @$csButton.click => @state = 'cs'

        # Bind popout button
        @$maximizeButton.click => @maximize = !@maximize

        # Make the editor resizable
        if oj.isClient

          if $.resize?
            $.resize.throttleWindow = false
            $.resize.delay = 100

            # Detect when the window resizes
            $(window).resize =>
              @windowResized window.innerWidth, window.innerHeight

            # Resizing root updates the frame layout
            @$el.resize (e,ui) =>
              @updateFrame()

            # Resizing the resizer updates the frame layout
            @$resizer.resize (e,ui) =>
              h = $(e.currentTarget).height()
              if @width < phoneWidth
                # manually cap min height
                if h / 2 > @minHeight
                  @height = h / 2
              else
                @height = h
              @updateFrame()

          if @$resizer?.drag?
            _$resizer = @$resizer
            _$gripper = @$gripper
            @$resizer.drag()
              .drag("start", ( ev, dd ) ->
                dd.width = $(this).width()
                dd.height = $(this).height()
                _$gripper.css(style:height:'100%')
                return
              )
              .drag("end", ( ev, dd ) ->
                _$gripper.css(style:height:'12px')
                return
              )
              .drag(
                (ev, dd ) ->
                  $(this).css(
                    height: Math.max( lineHeight, dd.height + dd.deltaY )
                  )
                  return
                handle:'.oj-TryEditor-gripper'
              )

  TryEditor.css

    border: "#{editorBorderWidth}px solid #{editorBorderColor}"
    boxShadow: '2px 2px 4px RGBA(0,0,0,0.15)'
    display:'block'
    position:'relative'
    zIndex:20
    backgroundColor: '#FEFAF3'

    '.oj-TryEditor-seperator':
      position:'absolute'
      top:'0px'
      left:'0px'
      backgroundColor:editorBorderColor
      width:'2px'
      height:'1px' # resized automatically
      zIndex: 100

    '.oj-TryEditor-resizer':
      position:'absolute'
      top:'-1px'
      left:'-1px'
      # border: "2px solid #{editorBorderColor}"
      # backgroundColor:'white'
      width:'2px' # resized automatically
      height:'1px' # resized automatically

    '.oj-TryEditor-inputs':
      display:'inline-block'
      zIndex:30
      position:'relative'

    '.oj-TryEditor-input-editor':
      resize:'none'
      border: "#{editorPadding}px solid #{editorBackgroundColor}"

    '.oj-TryEditor-outputs':
      display:'inline-block'
      position:'relative'
      zIndex:40

    '.oj-TryEditor-outputs > iframe':
      width:'100%'
      height:'100%'
      position:'absolute'
      backgroundColor:'white'
      zIndex: 20

    '.oj-TryEditor-console':
      position: 'absolute'
      color:'red'
      backgroundColor: 'RGBA(255,255,255,0.8)'
      textAlign: 'left'
      fontSize: '16px'
      padding: "#{consolePadding}px"
      # margin: '0px 0px 10px 0px'
      width: '100%'
      height: '100%'
      zIndex: 30
      display: 'none'

    '.oj-TryEditor-bar':
      position:'absolute'
      top: '0px'
      right: '0px'
      margin: '8px 4px 0 0'
      height: '21px'
      zIndex: 100

    '.oj-TryEditor-example-chooser':
      position:'relative'
      float:'right'
      height: '100%'
      zIndex: 10
      marginLeft:'8px'

    '.oj-TryEditor-bar-state':
      display:'inline-block'
      color: '#D5A876'
      width: '25px'
      height: '100%'
      float: 'right'
      marginLeft: '0px'
      zIndex: 101
      textAlign: 'center'
      cursor:'pointer'
      fontSize: '12px'

    '.oj-TryEditor-bar-state:hover':
      textDecoration:'underline'

    '.oj-TryEditor-bar-state.selected':
      fontWeight:'bold'
      color:'#E88E00'
      textDecoration:'none !important'

    '.oj-TryEditor-bar-maximize':
      display:'inline-block'
      backgroundImage: 'url(media/try_popout.png)'
      width: '15px'
      height: '12px'
      float: 'right'
      zIndex: 101
      cursor:'pointer'
      '@media phone':
        display:'none'

    '.oj-TryEditor-gripper':
      position:'absolute'
      bottom: '2px'
      right: '2px'
      left: 'auto'
      width: '100%'
      height: '12px'
      cursor:'s-resize'
      backgroundImage: 'url(media/try_gripper.png)'
      backgroundRepeat: 'no-repeat'
      backgroundPosition: 'bottom right'
      zIndex: 101

  return TryEditor: TryEditor

_pluginScripts =
  Backbone: ["<#{SCRIPT} src=\"scripts/underscore.js\" #{TEXTJ}></#{SCRIPT}>\n", "<#{SCRIPT} src=\"scripts/backbone.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  AceEditor: [
    "<#{SCRIPT} src=\"scripts/ace/ace.js\" #{TEXTJ}></#{SCRIPT}>\n"
    "<#{SCRIPT} src=\"scripts/oj.AceEditor.js\" #{TEXTJ}></#{SCRIPT}>\n"
  ]
  VimeoVideo: ["<#{SCRIPT} src=\"scripts/oj.VimeoVideo.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  GitHubButton: ["<#{SCRIPT} src=\"scripts/oj.GitHubButton.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  TwitterFollowButton: ["<#{SCRIPT} src=\"scripts/oj.TwitterFollowButton.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  markdown: ["<#{SCRIPT} src=\"scripts/oj.markdown.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  md: ["<#{SCRIPT} src=\"scripts/oj.markdown.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  marked: ["<#{SCRIPT} src=\"scripts/oj.marked.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  mustache: ["<#{SCRIPT} src=\"scripts/oj.mustache.js\" #{TEXTJ}></#{SCRIPT}>\n"]
  # Bootstrap: ["<#{SCRIPT} src=\"scripts/oj.Bootstrap.js\" #{TEXTJ}></#{SCRIPT}>\n"]

# _foundScripts: Plugins found in code as array
# scriptMap takes PluginName: ['<SCRIPT>','<SCRIPT>']
# code is the source being executed
_foundScripts = (code,pluginScripts) ->
  out = []
  for plugin,v of pluginScripts
    if code.indexOf(plugin) != -1
      out.push plugin
  out.sort()

_arraysEqual = (a, b) ->
  return true if a == b
  return false if a == null || b == null
  return false if a.length != b.length
  for v,i in a
    return false if a[i] != b[i]
  true

_escapeCode = (str) ->
  # Escape Quotes
  # str.replace /"/g, '\\"'
  # Add line continuations on newlines
  # str.replace /\n/g, "\\\n"
  str

_calculateScripts = (code,pluginScripts) ->
  out = ""

  # Always use:
  out += "<#{SCRIPT} src=\"scripts/jquery.js\" #{TEXTJ}></#{SCRIPT}>\n"
  out += "<#{SCRIPT} src=\"scripts/oj.js\" #{TEXTJ}></#{SCRIPT}>\n"

  foundScripts = _foundScripts code, _pluginScripts

  for plugin in foundScripts
    for s in pluginScripts[plugin]
      out += s
  out

_scriptTagWithUpdater = ->
  """
  <#{SCRIPT} class="updater">
  (function(){
    // Allow editor to rebuild iframe at will
    var _code = null;
    document.showError = function(err){
      // Error style
      var errorStyle = {style:{color:'red', fontSize:'16px', fontFamily:'sans-serif'}};

      // Report error
      $('body').oj([oj.div, errorStyle, err.toString()]);
    };
    document.rebuild = function(code){
      if (code == _code)
        return;
      $('script.build').remove()
      try {
      $('head').append("<scr"+"ipt class='build'>"+code+"</scr"+"ipt>");
      } catch(eAppend) {
        document.showError(eAppend);
      }
    };
    // Allow dom manipulation within the iframe
    document.oj = oj;
    document.$ = $;
  })(this);
  </#{SCRIPT}>
  """

_scriptTagForCodeBody = (code) ->

  """
  // Start onready
  $(function(){try{with(oj){

  // Insert code into body
  $.ojBody(function(){

  #{code}

  });

  // Handle errors
  }} catch(e) {
    document.showError(e);
  }});
  """

_scriptTagForCode = (code) ->
  """
  <#{SCRIPT} class="build">

  #{_scriptTagForCodeBody code}

  </#{SCRIPT}>
  """
_replaceIFRAME = ($iframeParent, $iframe, scriptTags, code) ->
  html = """
    <head>
    #{scriptTags}
    #{_scriptTagWithUpdater()}
    #{_scriptTagForCode code}
    </head>
    <body>
    </body>
  """

  # Recreate iframe
  $iframe.remove()
  iframe = document.createElement 'iframe'
  $iframeParent.append iframe
  doc = iframe.contentWindow or iframe.contentDocument
  if doc.document
    doc = doc.document
  doc.open()
  doc.write(html)
  doc.close()

# Updates by calling document.rebuild which was setup by the updater
_updateIFRAME = ($iframe, code) ->
  if $iframe.contents() and $iframe.contents()[0] and oj.isFunction $iframe.contents()[0].rebuild
    $html = $iframe.contents().find('html')
    $body = $iframe.contents().find('body')

    # Remove any generated style tags to allow css to be recreated.
    doc$ = $iframe.contents()[0].$
    $styles = doc$('style')
    $styles.each ->
      $this = $(@)
      cls = $this.attr('class')
      if oj.isString(cls) and cls.match(/^oj-.*style$/)
        $this.remove();

    # Clear body as we want the body to black if the code doesn't generate anything
    doc$('body').html('')

    # Remake everything
    $iframe.contents()[0].rebuild _scriptTagForCodeBody code

    # Clear twitter follow button loaded flag. This is used within the plugin
    # to prevent unecessary ajax requests. Because the editor constantly remakes
    # every keypress it is nice to avoid spamming twitter servers
    docOJ = $iframe.contents()[0].oj
    if (typeof docOJ != 'undefined' and typeof docOJ.TwitterFollowButton != 'undefined')
      docOJ.TwitterFollowButton._loaded = false


