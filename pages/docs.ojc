
###
Alan kay. The goal is increases the power of code with less code.
"[Reducing] the amount of code needed to make systems by a factor of 100, 1000, 10,000, or more."
http://mythz.servicestack.net/blog/2013/02/27/the-deep-insights-of-alan-kay/

OJ Simplifies:
  * No class or ids. You can still have them but they probably unnecessary.
     * Unnecessary naming sucks

  * Significantly

###

oj.use require 'oj-markdown'

_template = require './_template'
{renderTOC, renderContent, renderProperties:properties, renderMethods:methods, renderEvents:events, renderInherits:inherits, renderOptions:options, renderArguments:arguments_,renderName:name} = require './_content'

# _snippet = require './_snippet'
# _editor = require './_editor'

module.exports = ->

  _template

    title: 'OJ Docs - Unified Templating'

    styles: [
      'reset.css'
      'gg.css'
    ]

    scripts: [
      'jquery.js'
      'underscore.js'
      'backbone.js'
      'coffee-script.js'
      'ace/ace.js'
      'jquery-ui-1.10.3.custom.js'
      'jquery.ba-resize.min.js'
    ]

    left: ->
      renderTOC data

    right: ->
      renderContent data

    body: ->
    head: ->

data = [
    h: 'Starting Out', id: 'starting-out', d: """
    """
    items: [

      h: 'Introduction', id: 'intro', d: """

      OJ simplifies creation and manipulation of the DOM by abstracting the web into objects. It literally stands for Object Javascript, and was created under the philosophy that object encapsulation simplifies development.

      To this end OJ provides several [Collection Types](#collection-types) and [Form Types](#form-types) to help you create your website server side and manipulate it dynamically client-side. Two-way model binding is built right in if you use Backbone models (or anything with `.on` `.off` event binding). Collection binding is built into [oj.List](#List) and [oj.Table](Table), for more complex views.

      For simple tag creation OJ provides a series of [tag functions](#tags), one for every tag (`<div>`, `<span>`, `<ul>`, `<table>`, `<a>`, etc), to build up structure of your site and help create the collection and form types you are using. These tag functions allow you to create html structure, css, and bind jquery events simultaneously.

     To truly master OJ it is encouraged to create your own custom types; [List](#List) and [Table](#Table) are going to get you quite far, but it is much easier to think in terms of `ChatWindow` or `FriendList` then to manually manipulate several things at once by hand. To this end OJ provides a [type creation function](#createType) and some inheritable [base types](#base-types) to help you create types of your own. With these base types model binding is quite easy.

     For server side use of oj a [command-line tool](#command-line) called `oj` can be [installed](#install) with node's package manager `npm`. The tools purpose is to combine [oj file types](#file-types) together into `html` files. It supports watch for debugging and magnification of html, javascript, and css for production. **Important Note:** This tool is _not_ a web server. It is quite capable as a static site generator, but for more complex scenarios an [express plugin](http://expressjs.com/) is [in the works](https://github.com/ojjs/oj/issues/1).

      As always contributions are most welcome. Feel free to send [pull requests](https://github.com/ojjs/oj) or to report bugs and feature requests as [issues](https://github.com/ojjs/oj/issues).

      """
    ,
      h: 'Download', id: 'download', d: ->
        a href:'https://github.com/ojjs/oj/raw/master/lib/oj.js', ->
          Button 'Download OJ', c:'download-button'
        # a href:'https://github.com/ojjs/oj/raw/master/lib/oj.js', ->
        #   Button 'Download OJ Minified', c:'download-button'
    ,
      h: 'License', id: 'license', d: """
        Copyright (c) 2013 Evan Moran <br>
        OJ may be freely distributed under the [MIT license](https://raw.github.com/ojjs/oj/master/LICENSE)

      """
    ]

  # Collection Types
  # --------------------------------------------------------------------------
  ,
    h: 'Collection Types', id: 'collection-types', d: """
      These objects are built-in to OJ and designed to be the building blocks for more complex websites. [BulletList](#BulletList), [NumberList](NumberList) exist to easily create numbered lists or bulleted lists.

      All collection types can be created directly through a list of arguments, or by binding to a Backbone.Collection object. If a collection object is used these objects will minimally rebuild themselves as the collection changes.

      [List](#List) exists to create lists of items without symbols. It uses `<div>` for its tags instead of `<ul>` or `<li>` as this is often desired for `ChatWindows` or `FriendLists` -- basically this is ideal for whenever you don't really want numbers or bullets.

      [Table](#Table) is the most complex object built into OJ. It supports everything [List](#List) does, but adds another dimension. It also supports Backbone.Collection binding and is designed to support hundreds of thousands of rows. In generally OJ is built around the idea of direct DOM manipulation. Server-side it builds strings, but client side it just modifies elements directly for much improved performance.

      All collection objects inherit from [CollectionView](#CollectionView) and [View](#View) and so definitely take a look at what those provide.

    """

    items: [
      h:'oj.BulletList', id:'BulletList', d: """
          This is a simple alias for [oj.List](#List) to abstract creating **bulleted** lists. It overrides the properties [tagName](#List-tagName) to `ul`, and [itemTagName](#List-itemTagName) to `li`.
        """
    ,
      h:'oj.NumberList', id:'NumberList', d: """
          This is a simple alias for [oj.List](#List) to abstract creating **numbered** lists. It overrides the properties [tagName](#List-tagName) to `ul`, and [itemTagName](#List-itemTagName) to `li`.
        """
    ,
      h:'oj.List', id:'List', d: ->

        markdown """
          Lists are at the heart of OJ. They are a fundamental building block that lets you bind collections of models to views. That can be as simple as NumberList and BulletList above. Or they can be more complex and render Chat Messages, Todo Lists, or whatever else you want tied to data.

          Lists can be constructed by basic types:

              List('a', 2, true);

          Lists can be constructed from oj objects:

              List(CheckBox(true), TextBox('hello'));

          Lists can be constructed from [ojml](#ojml):

              List(
                [div, 'a'],
                [span, 'b']
              );

          Lists can be constructed from functions:

              List(
                function(){div('a');},
                function(){span('a');},
              );

        """
        name 'List(items..., properties)'

        arguments_ [
          h:'items...', id:'List-argument-items', d:"""
            Any number of values to add to the list.

            Constructing with these arguments has the same effect as setting the [items](List-items) property.
          """
        ,
          h:'properties', id:'Table-argument-rows', d:"""
            An object to bulk set properties.

            Keys that aren't properties are passed as attributes to the root element.
          """        ]
        inherits h:'CollectionView', id:'CollectionView'
        properties [
          h:'count', id:'List-count', d:"""
            Number of items (Number, [read-only](#read-only)))
          """
         ,
          h:'collection', id:'List-collection', d:"""
            Inherited from [CollectionView.collection](#CollectionView-collection)

            The collection for the view. This can be an Array or a Backbone.Collection

            When Backbone is used changes to the collection will cause the view
            to be automatically redrawn. This is done minimally so adds and removes
            cause fewest redraws possible.
          """
         ,
          h:'models', id:'List-models', d:"""
            Alias for `collection` property
          """
         ,
          h:'each', id:'List-each', d:"""
            Inherited from [CollectionView.each](#CollectionView-each)

            A mapping function that turns a model into a view.

            Use this whenever you set [models](#models) to specify which part of the model to render.
          """
         ,

          h:'tagName', id:'List-tagName', d:"""
            Name of tag (String, write-construct)
          """
         ,
          h:'itemTagName', id:'List-itemTagName', d:"""
            Name of tag for each item (String, [read-write](#read-write))
          """
         ,
          h:'$items', id:'List-$items', d:"""
            Helper to get all item jquery elements ([jQueryElement], [read-only](#read-only)))
          """
        ]
        methods [

          h:'item(index, oj)', id:'List-item', d:"""
            Get or set the item at `index`
            `index` may be negative to access elements at the end.

            When `view` is specified the item is set to the oj view
            When `view` is omitted the item value is returned
            How this value is returned is handled by [ojValue](jquery-ojValue)
            a included jQuery plugin.

                list.item(2)              // get item
                list.item(2, 'hello')     // set item to 'hello'
                list.item(2, function(){  // Set item to a TextBox
                  TextBox 'goodbye'
                }
          """
        ,
          h:'$item(index)', id:'List-$item', d:"""
            Helper to get an item's containing element wrapped by jquery
          """
        ,
          h:'add(index, oj)', id:'List-add', d:"""
            Add item at `index`
            `index` may be negative to access elements at the end.
            `oj` may be any oj view or object.

                list = List('a','b');      // ['a','b']
                list.add(1, 'c');          // ['a','c','b']
                list.add(-1, 'd');         // ['a','c','b','d']
          """
        ,
          h:'remove(index)', id:'List-remove', d:"""
            Remove item at index
            `index` may be negative to access elements at the end.

                list = List('a','b','c');  // ['a','b','c']
                list.remove(1);            // ['a','c']
                list.remove(-1);           // ['a']
          """
        ,
          h:'push(oj)', id:'List-push', d:"""
            Add a new last item

                list = List('a','b');      // ['a','b']
                list.push('c');            // ['a','b','c']
          """
        ,
          h:'pop()', id:'List-pop', d:"""
            Remove the last item

                list = List('a','b');      // ['a','b']
                list.pop();                // ['a']
          """
        ,
          h:'shift(oj)', id:'List-shift', d:"""
            Remove the first item

                list = List('a','b');      // ['a','b']
                list.shift();              // ['b']
          """
        ,
          h:'unshift(oj)', id:'List-unshift', d:"""
            Add a new first item

                list = List('a','b');      // ['a','b']
                list.unshift('c');         // ['c','a','b']
          """
        ,
          h:'clear(oj)', id:'List-clear', d:"""
            Remove all items

                list = List('a','b');      // ['a','b']
                list.clear();              // []
          """
        ,
          h:'move(index, index2)', id:'List-move', d:"""
            Move item from `index` to `index2`

            list = List('a','b','c');      // ['a','b','c']
                list.move(2,0);            // ['c','b','a']
          """
        ,
          h:'swap(index, index2)', id:'List-swap', d:"""
            Swap items at `index` to `index2`

            list = List('a','b','c');      // ['a','b','c']
                list.swap(1,2);            // ['a','c','b']
          """
        ]
    ,
      h:'oj.Table', id:'Table', d: ->

        markdown """
          Tables are another building block in OJ. Like [List] it can be used to show static data or be bound to collections of models. When the collection changes it will automatically add and remove rows to rerender the table.

          Tables can be constructed with arrays of values:

              Table(
                [1,2,3],
                [4,5,6]
              );
        """
        name 'Table(rows..., properties)'

        arguments_ [
          h:'rows...', id:'Table-argument-rows', d:"""
            Any number of rows to add to the table.

            Constructing with these arguments has the same effect as setting the [items](List-items) property.
          """
        ,
          h:'properties', id:'Table-argument-properties', d:"""
            A object to bulk set properties.

            Keys that aren't properties are passed as attributes to the root element.
          """
        ]
        inherits h:'CollectionView', id:'CollectionView'
        properties [
          h:'rowCount', id:'Table-rowCount', d:"""
            Number of rows (Number, [read-only](#read-only)))
          """
         ,
          h:'columnCount', id:'Table-columnCount', d:"""
            Number of columns (Number, [read-only](#read-only)))
          """
         ,
          h:'collection', id:'Table-collection', d:"""
            Inherited from [CollectionView.collection](#CollectionView-collection)

            The collection for the view. This can be an Array or a Backbone.Collection

            When Backbone is used changes to the collection will cause the view
            to be automatically redrawn. This is done minimally so adds and removes
            cause fewest redraws possible.
          """
         ,
          h:'models', id:'Table-models', d:"""
            Alias for `collection` property
          """
         ,
          h:'each', id:'Table-each', d:"""
            Inherited from [CollectionView.each](#CollectionView-each)

            A mapping function that turns a model into a view.

            Use this whenever you set [models](#models) to specify which part of the model to render.
          """
         ,
          h:'$trs', id:'Table-$trs', d:"""
            Accessor to all row `<tr>` elements ([read-only](#read-only))
          """
         ,
          h:'$ths', id:'Table-$ths', d:"""
            Accessor to all `<th>` elements ([read-only](#read-only))
          """

         ,
          h:'$table', id:'Table-$table', d:"""
            Accessor to `<table>` element ([read-only](#read-only))
          """
         ,
          h:'$thead', id:'Table-$thead', d:"""
            Accessor to `<thead>` element ([read-only](#read-only))
          """
         ,
          h:'$tbody', id:'Table-$tbody', d:"""
            Accessor to `<tbody>` element ([read-only](#read-only))
          """
         ,
          h:'$tfoot', id:'Table-$tfoot', d:"""
            Accessor to `<tfoot>` element ([read-only](#read-only))
          """
         ,
          h:'$caption', id:'Table-$caption', d:"""
            Accessor to `<caption>` element ([read-only](#read-only))
          """
         ,
          h:'$colgroup', id:'Table-$colgroup', d:"""
            Accessor to `<colgroup>` element ([read-only](#read-only))
          """
         ,
          h:'$theadTR', id:'Table-$theadTR', d:"""
            Accessor to `<tr>` element in `<thead>` ([read-only](#read-only))
          """
         ,
          h:'$tfootTR', id:'Table-$tfootTR', d:"""
            Accessor to `<tr>` element in `<tfoot>` ([read-only](#read-only))
          """
        ]
        methods [

          h:'row(rx, ojArray)', id:'Table-row', d:"""
            Get or set the row at `index`
            `index` may be negative to access elements at the end.

            When `ojArray` is specified the row cells are set to the specified oj views.

            When `ojArray` is omitted the row values are returned.

            How this value is returned is handled by [ojValue](jquery-ojValue) jQuery plugin.

          """
        ,
          h:'cell(rx, cx, oj)', id:'Table-cell', d:"""
            Get or set the cell at row index `rx`, column index `cx`

            `rx` and `cx` may be negative to access elements at the end.

            When `oj` is specified the cell is set to the value of the oj view.

            When `oj` is omitted the cell value is returned.

            How this value is returned is handled by [ojValue](jquery-ojValue) jQuery plugin.
          """
        ,
          h:'clear()', id:'Table-clear', d:"""
            Remove everything in the table: rows, headers, footers, and captions.
          """
        ,
          h:'clearBody()', id:'Table-clearBody', d:"""
            Remove all rows in body
          """
        ,
          h:'clearHeader()', id:'Table-clearHeader', d:"""
            Remove the header
          """
        ,
          h:'clearFooter()', id:'Table-clearFooter', d:"""
            Remove the footer
          """
        ,
          h:'addRow(rx, ojArray)', id:'Table-addRow', d:"""
            Add row at index `rx`

            `rx` may be negative to access elements at the end.

            `ojArray` is an array of any oj views or objects.
          """
        ,
          h:'removeRow(rx)', id:'Table-removeRow', d:"""
            Remove item at index `rx`
          """
        ,
          h:'pushRow(ojArray)', id:'Table-pushRow', d:"""
            Add a new last row

            `ojArray` is an array of oj views or objects.
          """
        ,
          h:'popRow()', id:'Table-popRow', d:"""
            Remove the last row
          """
        ,
          h:'shiftRow()', id:'Table-shiftRow', d:"""
            Remove the first row and return it.
          """
        ,
          h:'unshiftRow(ojArray)', id:'Table-unshiftRow', d:"""
            Add a new first row
            `ojArray` is an array of oj views or objects.
          """
        ,
          h:'moveRow(rx, rx2)', id:'Table-moveRow', d:"""
            Move row from index `rx` to `rx2`
          """
        ,
          h:'swapRow(rx, rx2)', id:'Table-swapRow', d:"""
            Swap row at index `rx` to `rx2`
          """
        ,
          h:'$tr(rx)', id:'Table-$tr', d:"""
            Accessor to `<tr>` at row index `rx`
          """
        ,
          h:'$td(rx,cx)', id:'Table-$tr', d:"""
            Accessor to `<td>` at row index `rx`, column index `cx`
          """

        ]

    ]

  ,
    h: 'Form Types', id: 'form-types', d: """
      These objects create smart form elements that two-way bind to _parts_ of a model: a model-key. Why only part of a model? The reason is controls usually only affect a single key, for example the `email` field, or `name` field might be bound to a [TextBox](#TextBox). While a  [CheckBox](#CheckBox) might bind to boolean properties `wantsTheNewsletter` or `isRegistered`. These keys can all be on the same `UserModel`, but they affect different things.

      ### Example of binding a TextBox

      Create a user

          var UserModel = new Backbone.Model.extend();
          var user = new UserModel({name:'Evan'});

      Bind TextBox to the user's name

          var TextBox({model: user, key:'name'});

      Two way binding will happen automatically. If you change the model's name the TextBox will update. If you type in the TextBox the model will update.

    The model-key binding syntax works on all Form Types the inherit from [ModelKeyView](#ModelKeyView).

    """
    items: [
      h:'oj.CheckBox', id:'CheckBox', d: ->

        markdown """
          An OJ object that creates and manipulates a CheckBox control. The `value` property can be set in the first argument, or through via `properties`.
        """

        name 'CheckBox(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'CheckBox-value', d:"""
            The value of the control as a boolean ([read-write](#read-write)).

            True means checked. False unchecked.
          """
        ,
          h:'model', id:'CheckBox-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'CheckBox-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ]

        markdown """
          ### Example
              var myCheckBox = CheckBox(true, click:function(){alert('click worked!');});

        """
    ,
      h:'oj.TextBox', id:'TextBox', d: ->


        markdown """
          An build-in OJ type that creates and manipulates a checkbox form element. The `value` property can be set in the first argument, or in the `options` object.


        """
        name 'TextBox(value, properties)'

        inherits h:'ModelKeyView', id:'ModelKeyView'

        properties [
          h:'value', id:'TextBox-value', d:"""
            The value of the control as a string ([read-write](#read-write)).
          """
        ,
          h:'model', id:'TextBox-model', d:"""
            Bind a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """
        ,
          h:'key', id:'TextBox-key', d:"""
            Bind a specific key of a model to this control ([read-write](#read-write), [inherited](#ModelKeyView)).
          """

        ]
        markdown """
          ### Example
              var myTextBox = TextBox('Default text');
        """

    ]
  ,
    h: 'Creating Types', id: 'creating-types', d: """
      The point of OJ is creating types that better abstract the web. To do this OJ includes a function called [oj.createType](#createType).

      ### Features

      * Creates 100% real javascript types
      * Works seemlessly between javascript and coffee-script
      * First class properties support:
        * Properties by value
        * Properties by get and set functions
      * Supports Constructors and Methods
      * Supports Inheritance
        * `inherits` up to one Type
        * Call super with `this.super.methodName()`
      * `new` is optional

    """
    items: [
      h:'oj.createType', id:'createType', d: ->

        markdown """
          This function creates new type constructors. is a big part of why OJ types are so easy to create and use. Generally you should create new types when the component is well understood and often when it has an analogous model.
        """

        name 'createType(name, options)'

        arguments_ [
          h:'name', id:'Type-argument-name', d:"""
            The string name of the type you want to create.
          """
        ,
          h:'options', id:'Type-argument-options', d:"""
            An object that specifies `properties`, `methods`, `constructor`, and an inheritance `base` type.

            See more information below:
          """
        ]

        options [
          h:'base:', id:'Type-option-base', d:"""
            The type to inherit. When making OJ views use a [base type](#base-types).
          """
        ,
          h:'properties:<obj>', id:'Type-option-properties', d:"""
            Define the type's properties.
          """
        ,
          h:'methods:<obj>', id:'Type-option-methods', d:"""
            Define the type's methods.

            To call super use: `TypeName.base.methodName.apply(this, arguments);
          """
        ,
          h:'constructor:<fn>', id:'Type-option-methods', d:"""
            Optionally define a constructor. `this` will be bound correctly.

            To call super use: `TypeName.base.constructor.apply(this, arguments);
          """

        ]

        markdown """

          ### Example

              # Define type user
              User = oj.createType 'User',
                properties:
                  name: null
                  birthDate: null
                methods:
                  # Calculate age from @birthDate
                  age: ->
                    today = new Date()
                    age = today.getFullYear() - @birthDate.getFullYear()
                    m = today.getMonth() - @birthDate.getMonth()
                    if m < 0 or (m == 0 and today.getDate() < @birthDate.getDate())
                      age--
                    age

              # Create a user
              user = new User name:'Kelly', birthDate: new Date(1969, 0, 1)

              # Manipulate the user

              user.name               # => 'Kelly'
              user.birthDate          # => Date(1969, 0, 1)

              user.name = 'Ted'       # => name is set to 'Ted'

              # List properties

              user.properties         # => ['name', 'birthDate']
              user.has('birthDate')   # => true
              user.has('fakeProp')    # => false

              # List methods

              user.methods            # => ['age']
              user.can('age')         # => true
              user.can('fakeMethod')  # => false

              user.type               # => User
              user.typeName           # => 'User'

        """
    ,
      h:'Type Interface', id:'Type', d: ->

        markdown """
          All types created by [oj.createType](#createType) have the following methods and properties.
        """
        properties [
          h:'type', id:'Type-type', d:"""
            The type that made this instance ([read-only](#read-only))
          """
        ,
          h:'typeName', id:'Type-typeName', d:"""
            The name of type that made this instance ([read-only](#read-only))
          """
        ,
          h:'properties', id:'Type-properties', d:"""
            Array of all properties the type supports ([read-only](#read-only))
          """
        ,
          h:'methods', id:'Type-methods', d:"""
            Array of all methods the type supports ([read-only](#read-only))
          """
        ]
        methods [
          h:'get()', id:'Type-get', d:"""
            Get all properties as an object
          """
        ,
          h:'get(prop)', id:'Type-get', d:"""
            Get the value of property `prop`. `undefined` is returned if `prop` is not a valid property
          """
        ,
          h:'set(prop,val)', id:'Type-set', d:"""
            Set property `prop` to value `val`
          """
        ,
          h:'set(props)', id:'Type-set', d:"""
            Set all properties at once. `props` is an object mapping key to value. Invalid keys defined in `props` are ignored.
          """
        ,
          h:'has(prop)', id:'Type-has', d:"""
            Determine if string `prop` is a property of this instance
          """
        ,
          h:'can(method)', id:'Type-has', d:"""
            Determine if string `method` is a method of this instance
          """
        ,
          h:'toJSON()', id:'Type-toJSON', d:"""
            Convert properties to json
          """
        ]
    ,
      h:'oj.typeOf', id:'typeOf', d: ->
        markdown """
          This function helps detect what type an object is. It is much smarter then the built in `typeof` keyword.
        """

        name 'typeOf(any)'

        arguments_ [
          h:'any', id:'typeOf-any', d:"""
            Returns the type of `any` as a string.
          """
        ]

        markdown """
          ### Example

              // OJ types return their own name
              oj.typeOf(new CheckBox());  // "CheckBox"

              // jQuery selectors return 'jquery'
              oj.typeOf($('body'));       // "jquery"
              oj.typeOf($('body')[0]);    // 'dom-element'

              // DOM elements and DOM text elements also work
              $('body').html('test')
              var $contents = $('body').contents()
              oj.typeOf($contents[0]);    // 'dom-text'

              // Basic types work too
              oj.typeOf(undefined);       // 'undefined'
              oj.typeOf(null);            // 'null'
              oj.typeOf(true);            // 'boolean'
              oj.typeOf(42);              // 'number'
              oj.typeOf("test");          // 'string'
              oj.typeOf(/.*/);            // 'regexp'
              oj.typeOf(new Date());      // 'date'

        """
    ]
  ,
    h: 'Base Types', id: 'base-types', d: """
      For those of you who want to make your own rich oj views, there are a few inheritable types that will make your life easier.

      [View](#View) - The heart of OJ, this makes objects behave like [tag functions](#tag).

      [ModelKeyView](#ModelKeyView) - Binds the view to a part of a model (a model + key). Used by all the [form elements](#form-types). Great for creating two-way bindings.

      [CollectionView](#CollectionView) - Bind the view to a collection of models. Used by [List](#List) and [Table](#Table). Automatically binds to collection add, remove, change events.
    """
      # [ModelView](#ModelView) - Bind the view to a model. Good for simple views that should re-render when changed.
    items: [
      h:'oj.View', id:'View', d: ->
        markdown """
          This object is the basis of much of the functionality of OJ. It emits creation events so that objects act like [oj.tag](#tag). It creates the root element of your object and gives convenient access to it through [el](#View-el). It provides an [attributes](#View-attributes) property and related methods to let you set and get attributes.

          All types created using [oj.createType](#createType) behave this way.

              var textbox = TextBox({value:'my text'});

          Is the same as:

              var textbox = TextBox();
              textbox.value = 'my text';

          (Note: because [oj.createType](#createType) removes the need to use `new`, so in the above example it wasn't necessary to call `new TextBox()`. See [oj.createType](#createType) if you want to learn more about why this was done.)

          Any options that don't map to properties will be passed through to the root element as attributes. This lets this work as you would expect:

              TextBox({value:'Placeholder text', id:'id123', style:{color:'red'}})

          Also options can come in any order. This is especially useful for defining style ()

              TextBox({id:'id123'}, 'my text', {style:{
                  color:'red'
                }
              })
        """
        properties [
          h:'el', id:'View-el', d:"""
            The root element ([read-only](#read-only), [cached](#cached)).
          """
        ,
          h:'$el', id:'View-$el', d:"""
            The jquery-enabled root element ([read-only](#read-only), [cached](#cached))
          """
        ,
          h:'attributes', id:'View-attributes', d:"""
            Get all attributes for the root element ([read-only](#read-only))
          """
        ]
        methods [

          h:'addAttribute(name,value)', id:'View-addAttribute', d:"""
            Add an attribute. Supports everything [oj.tag](#tag) supports, including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'addAttribute(name,value)', id:'View-addAttribute', d:"""
            Add an attribute. Supports everything [oj.tag](#tag) supports, including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'addAttributes(obj)', id:'View-addAttributes', d:"""
            Add multiple attributes at once. Supports everything [oj.tag](#tag) supports. Including jQuery events and `style` renaming such as `fontSize` to `font-size`.
          """
        ,

          h:'removeAttribute(name)', id:'View-addAttribute', d:"""
            Remove attribute with by `name`.
          """
        ,

          h:'removeAttributes(list)', id:'View-addAttributes', d:"""
            Remove all attributes in the list.
          """
        ,

          h:'$(selector)', id:'View-$', d:"""
            Find elements from root with jQuery.
          """
        ,
          h:'toHTML()', id:'View-toHTML', d:"""
            Convert view to html
          """
        ,
          h:'toDOM()', id:'View-toDOM', d:"""
            Convert view to dom
          """
        ,
          h:'toString()', id:'View-toString', d:"""
            Convert view to a string. By default this calls toHTML()
          """

        #   h:'detach', id:'View-detach', d:"""
        #     (Not Yet Implemented)

        #     Detach the element from the dom leaving a placeholder
        #     so that it can be reattached in the same place.
        #   """
        # ,
        #   h:'attach', id:'View-attach', d:"""
        #     (Not Yet Implemented)

        #     Attach the element from the dom leaving a placeholder
        #     so that it can be reattached in the same place.
        #   """

        ]

        ###
    # Key used to access model
    key: null

    # Live update model as text changes
    live: true
    value:
      get: -> throw "#{@typeName} value getter not implemented"
      set: (v) -> throw "#{@typeName} value setter not implemented"

    modelChanged: ->
    viewChanged: ->
  ###
    ,
      h:'oj.ModelKeyView', id:'ModelKeyView', d: ->

        inherits h:'View', id:'View'

        properties [
          h:'model', id:'ModelKeyView-model', d:"""
            The model part of the model-key that partially binds a model. Both key and model are required.
          """
        ,
          h:'key', id:'ModelKeyView-key', d:"""
            The key part of the model-key that partially binds a model. Both key and model are required.
          """
        ]
        events [
          # TODO: Include params to these event methods
          h:'modelChanged(...)', id:'ModelKeyView-modelChanged', d:"""
            Overridable event method called when the model is changed

            When overriding be sure to call the base method
          """
        ,
          h:'viewChanged(...)', id:'CollectionView-viewChanged', d:"""
            Call this event method to when the view changes. This will cause the model to be updated automatically.
          """
        ]
    ,
      h:'oj.CollectionView', id:'CollectionView', d: ->

        inherits h:'View', id:'View'

        properties [
          h:'collection', id:'CollectionView-collection', d:"""
            The inherited collection property for the view. This can be an Array or a Backbone.Collection.

            When Backbone is used changes the CollectionView automatically binds to changes in the collection and calls the following methods:

            * `collectionModelAdded`
            * `collectionModelRemoved`
            * `collectionModelChanged`
            * `collectionModelDestroyed`
            * `collectionReset`

            When implementing a oj.CollectionView these event methods should be overriden to correctly update state as the collection changes.
          """
        ,
          h:'models', id:'CollectionView-models', d:"""
            Alias for `collection` property.
          """
        ]
        events [
          # TODO: Include params to these event methods
          h:'collectionModelAdded(...)', id:'CollectionView-collectionModelAdded', d:"""
            Overridable event method called when a model is added to the collection
          """
        ,
          h:'collectionModelRemoved(...)', id:'CollectionView-collectionModelRemoved', d:"""
            Overridable event method called when a model is removed from the collection
          """
        ,
          h:'collectionModelChanged(...)', id:'CollectionView-collectionModelChanged', d:"""
            Overridable event method called when a model changes
          """
        ,
          h:'collectionModelDestroyed(...)', id:'CollectionView-collectionModelDestroyed', d:"""
            Overridable event method called when a model is destroyed
          """
        ,
          h:'collectionReset()', id:'CollectionView-collectionReset', d:"""
            Overridable event method called when the entire collection is remade
          """
        ]

    ]

  ,
    h: 'Static Websites', id: 'static-websites', d: """
      OJ has the capability of building static websites on the command-line using the [oj command](#command-line). This is best for sites that don't change depending on which user loads the page. Either the pages don't change or the data to render comes from ajax requests.

      ### Features

        * _Auto Minification:_ All javascript, css, html are minified unless `--debug` is set
        * _Unified Templating:_ `.oj` and `.ojc` files turn into javacsript, html, and css.
        * Files and Directories can be built, recursed upon, and watched
        * Files are automatically minified unless `--debug` option is set.
        * Files can be included from other files using node's `require` syntax.
        * Node modules can be included as well. Simply `require` them, and they will also be brought into the system (similar to [browserify](http://browserify.org/)).
        * Built in support for coffee-script with `.ojc` files. You don't even need to install coffee-script, it just works.
    """
    items: [

      h: 'Install', id: 'install', d: """

        To use OJ on the server you will need to install the `oj` command built on top of [node.js](http://nodejs.org). For this you need to install node and its package manager `npm`. There are many ways to do this installation, but this will get you started:

        Install `node` on OSX with [homebrew](http://mxcl.github.com/homebrew/):

            brew install node

        Install `node` on Ubuntu with apt-get:

            sudo apt-get install nodejs npm

        Finally install `oj` with `npm`:

            npm install -g oj
      """
    ,
      h: 'File Types (.oj / .ojc)', id: 'file-types', d: """
        The [oj.js](#download) javascript library works perfectly fine inside of `.js`, or `.coffee` files. The only issue is that it gets tiring writing `oj` in front of everything: `oj.html`, `oj.Table`, etc.

        To solve this OJ supports two file types:

        * `.oj` is javascript
        * `.ojc` is coffee-script

        These files have been fully integrated into node. This means you can include other files using `require`, and you must use `module.exports` to set the what the module should return. Here are some examples:

        ### .oj example (javascript):

            # hello.oj
            module.exports = return [html,
              [head],
              [body,
                [div 'Hello world']
              ]
            ]

        ### .ojc example (coffee-script):

            # hello.ojc
            module.exports = ->
              html ->
                head ->
                body ->
                  div 'Hello world'

      """
    ,
      h: 'Command Line', id: 'command-line', d: """
        The `oj` command builds `.oj` and `.ojc` [file types](#file-types) into html files.

        ### Usage

            oj [options] <file> <dir> ...

            Options:

              -h, --help               output usage information
              -V, --version            output the version number
              -d, --debug              Turn on debug output
              -o, --output <dir>       Directory to output all files to
              -r, --recurse            Recurse into directories
              -m, --modules <modules>  List of modules to include
              -v, --verbose <level>    Turn on verbose level 0-3
              -w, --watch              Turn on watch mode

        When options are omitted these are the defaults:

            --output defaults to ./
            --debug defaults to off<br>
            --verbose defaults to 1

        ### Ignored file prefixes

          * Partials and Templates (start with `_`)
          * OJ Plugins (start with `oj.`)
          * Hidden files (start with `.`)

        ### Examples

        Build `hello.oj` to current directory

            oj hello.oj

        Build `hello.oj` without minification to `www` directory

            oj -d -o www hello.oj

        Watch `hello.oj` and build to `www` directory

            oj --watch -o www hello.oj

        Build `pages` directory to `www`

            oj -o www pages

        Recursively build `pages` directory to `www`

            oj -r -o www pages

        Recursively watch and build `pages` directory to `www`

            oj -w -r -o www pages

      """


    ]
]




###


          <dl class='row'>
            <dt class='gg25'>make()</dt><dd class='gg75'>
            Create the initial dom element with oj.<br>
            <br>
            Calling make should generate the same result if called
            multiple times. Specifically if you generate an id you
            should store it in `this.id` and reuse the same id
            each time.
            </dd>
          </dl>
Command Line


Helper Methods

  oj.isUndefined
  oj.isBoolean
  oj.isNumber
  oj.isString
  oj.isDate
  oj.isFunction
  oj.isArray
  oj.isRegEx
  oj.isDOM
  oj.isDOMElement
  oj.isDOMAttribute
  oj.isDOMText
  oj.isjQuery
  oj.isBackbone
  oj.isOJ
  oj.isArguments
  oj.addProperty
  oj.addProperties
  oj.addMethod
  oj.addMethods

Form Libraries
  All Controls
    model: <Backbone>, auto watch for change events
    key:  <string>  stores key to change in model
    value: <bool>
    formh: control name value when posting (maps to attr: name, defaults to key)
    formValue: control value value when posting a form (maps to attr:value, defaults to value.toString())

    # Custom event triggered when the view OR the model changes
    modelChanged: (control) -> only when model changes
    viewChanged: (control) -> only when view changes

  Form
  CheckBox   change = check/uncheck
  ListBox  change = select thing
  TextBox  change = keyup
  TextArea    change = keyup


  FilterBox  change = select thing
  SearchBox change = keyup

Utility Libraries

  markdown
  mustache

Examples

FAQ

Versions













###