
###
Alan kay. The goal is increases the power of code with less code.
"[Reducing] the amount of code needed to make systems by a factor of 100, 1000, 10,000, or more."
http://mythz.servicestack.net/blog/2013/02/27/the-deep-insights-of-alan-kay/

OJ Simplifies:
  * No class or ids. You can still have them but they probably unnecessary.
     * Unnecessary naming sucks

  * Significantly

###

oj.use require 'oj-markdown'

_template = require './_template'
{renderTOC, renderContent, renderProperties:properties, renderMethods:methods, renderInherits:inherits} = require './_content'

# _snippet = require './_snippet'
# _editor = require './_editor'

module.exports = ->

  _template

    title: 'OJ Docs -- Unified Templating'

    styles: [
      'reset.css'
      'gg.css'
    ]

    scripts: [
      'jquery.js'
      'underscore.js'
      'backbone.js'
      'coffee-script.js'
      'ace/ace.js'
    ]

    left: ->
      renderTOC data

    right: ->
      renderContent data

    body: ->
    head: ->

data = [
    h: 'Introduction', id: 'intro', d: """
      This is the full documentation for OJ. The goal is to have all topics be explained clearly with examples. If you see anything missing or confusing please add an [issue](https://github.com/ojjs/oj/issues). If you are feeling particularly helpful send a [pull request](https://github.com/ojjs/oj)!
    """
    items: [
      h: 'Installation', id: 'install', d: """
        OJ can be run in a web browser without installation. Simply add the script `oj.js` and you are good to go.

        To use OJ on the server you will need to install the `oj` command built on top of [node.js](http://nodejs.org). For this you need to install node and its package manager `npm`. There are many ways to do this installation, but this will get you started:

        Install `node` on OSX with [homebrew](http://mxcl.github.com/homebrew/):

            brew install node

        Install `node` on Ubuntu with apt-get:

            sudo apt-get install nodejs npm

        Finally install `oj` with `npm`:

            npm install -g oj
      """
    ,
      h: 'File Types', id: 'file-types', d: """
        The `oj.js` javascript library works perfectly fine inside of `.js`, or `.coffee` files. The only issue is that it gets tiring writing `oj.html`, `oj.Table`, everywhere.

        To solve this OJ supports two file types:

        * `.oj` is javascript
        * `.ojc` is coffee-script

        These files have been fully integrated into node. This means you can include other files using `require`, and you must use `module.exports` to set the what the module should return. Here are some examples:

        .oj example (javascript):

            # hello.oj
            module.exports = return [html,
              [head],
              [body,
                [div 'Hello world']
              ]
            ]

        .ojc example (coffee-script):

            # hello.ojc
            module.exports = ->
              html ->
                head ->
                body ->
                  div 'Hello world'

      """
    ,
      h: 'Command Line', id: 'command-line', d: """
        The `oj` command builds `.oj` and `.ojc` [file types](#file-types) into html files.

        Major features:

        * _Auto Minification:_ All javascript, css, html are minified unless `--debug` is set
        * _Unified Templating:_ `.oj` and `.ojc` files turn into javacsript
        * Files and Directories can be built, recursed upon, and watched
        * Files can be included from other files using node's `require` syntax. These files will be automatically minified into the final html file.
        * Node modules can be included as well. Simply `require` them, and they will also be brought into the system.
        * Built in support for coffee-script with `.ojc` files. You don't even need to install it on the command line.

        Usage:

            oj [options] <file> <dir> ...

            Options:

              -h, --help               output usage information
              -V, --version            output the version number
              -d, --debug              Turn on debug output
              -o, --output <dir>       Directory to output all files to
              -r, --recurse            Recurse into directories
              -m, --modules <modules>  List of modules to include
              -v, --verbose <level>    Turn on verbose level 0-3
              -w, --watch              Turn on watch mode

        Defaults:

            --output directory defaults to "./"
            --debug defaults to off
            --verbose defaults to 1

        Ignored file prefixes:

          * Partials and Templates (start with `_`)
          * OJ Plugins (start with `oj.`)
          * Hidden files (start with `.`)

        Examples

            oj hello.oj                 # Outputs './hello.html'

            oj -d -o www hello.oj       # Outputs debug './www/hello.html'

            oj --watch -o www hello.oj  # Watch  './www/hello.html'

            oj -o www pages             # Build pages directory to www

            oj -r -o www pages          # Recursively build pages to www

            oj -w -r -o www pages       # Recursively watch pages to www

      """
    ]
  ,
    h: 'Creating Types', id: 'creating-types', d: """
      The point of oj is creating types that better abstract the web. To do this oj includes a function called [type](#type).

      Features:

      * Creates 100% real javascript types
      * Works seemlessly between javascript and coffee-script
      * First class properties support:
        * Properties by value
        * Properties by get and set functions
      * Supports Constructors and Methods
      * Supports Inheritance
        * `inherits` up to one Type
        * Call super with `this.super.methodName()`
      * `new` is optional

    """
    items: [
      h:'type', id:'type', d: ->
        markdown """
          This method creates types

          All types created with [type](#type) contain this interface:
        """
        properties [
          h:'type', id:'Type-type', d:"""
            The name of the type
          """
        ,
          h:'properties', id:'Type-properties', d:"""
            Array of all properties the type supports (readonly)
          """
        ,
          h:'methods', id:'Type-methods', d:"""
            Array of all methods the type supports (readonly)
          """
        ]
        methods [
          h:'toJSON', id:'Type-toJSON', d:"""
            Convert properties to json
          """
        ]
    ,
      h:'typeOf', id:'typeOf', d: ->
        markdown """
          This function helps detect what type an object is. It is much smarter then the built in `typeof` keyword.

              User = oj.type 'User',
                properties:
                  name: 'Joseph'
              user = new User

              typeOf user       # => 'User'
              typeOf 'str'      # => 'string'
              typeOf $('body')  # => 'jquery'

        """


    ]
  ,
    h: 'Creating Views', id: 'creating-views', d: """
      For those of you who want to make your own rich oj views, there are a few inheritable types that will make your life easier.
    """
    items: [
      h:'View', id:'View', d: ->
        properties [
          h:'el', id:'View-el', d:"""
            Get the root element for the view.

            This calls the make method
          """
         ,
          h:'$el', id:'View-$el', d:"""
            Get a jQuery enabled el
          """
         ,
          h:'attributes', id:'View-attributes', d:"""
            Accessor to root element attributes. jQuery events will be bound.
          """

        ]
        methods [
          h:'$(selector)', id:'View-$', d:"""
            Find elements from root with jQuery.
          """
        ,
          h:'toHTML()', id:'View-toHTML', d:"""
            Convert view to html
          """
        ,
          h:'toDOM()', id:'View-toDOM', d:"""
            Convert view to dom
          """
        ,
          h:'toString()', id:'View-toString', d:"""
            Convert view to a string. By default this calls toHTML()
          """
        ,
          h:'detach', id:'View-detach', d:"""
            Not Yet Implemented

            Detach the element from the dom leaving a placeholder
            so that it can be reattached in the same place.
          """
        ,
          h:'attach', id:'View-attach', d:"""
            Not Yet Implemented

            Attach the element from the dom leaving a placeholder
            so that it can be reattached in the same place.
          """

        ]
    ,
      h:'ModelView', id:'ModelView', d: ->

        inherits h:'View', id:'View'

        properties [
          h:'model', id:'ModelView-model', d:"""
            Bind a model to this view
          """
        ,
          h:'attributes', id:'View-attributes', d:"""
            Accessor to root element attributes. jQuery events will be bound.
          """
        ]
    ]
]




###


          <dl class='row'>
            <dt class='gg25'>make()</dt><dd class='gg75'>
            Create the initial dom element with oj.<br>
            <br>
            Calling make should generate the same result if called
            multiple times. Specifically if you generate an id you
            should store it in `this.id` and reuse the same id
            each time.
            </dd>
          </dl>
Command Line


Creating Types

  type
  typeOf
  isUndefined
  isBoolean
  isNumber
  isString
  isDate
  isFunction
  isArray
  isRegEx
  isDOM
  isDOMElement
  isDOMAttribute
  isDOMText
  isjQuery
  isBackbone
  isOJ
  isArguments
  addProperty
  addProperties
  addMethod
  addMethods

Inheritable Types

  View
  ModelView
  FormView

Layout Libraries

  Tabs

Form Libraries
  All Controls
    model: <Backbone>, auto watch for change events
    key:  <string>  stores key to change in model
    value: <bool>
    formh: control name value when posting (maps to attr: name, defaults to key)
    formValue: control value value when posting a form (maps to attr:value, defaults to value.toString())

    # Custom event triggered when the view OR the model changes
    change: (control) ->
    modelChange: (control) -> only when model changes
    viewChange: (control) -> only when view changes

    # Backbone event hooks
    # Anything with a model should intercept this at construction
    #   Save them to a temporary
    #   And then bind them to the model on set (unbind on unset)
    on:
      change: ->
      fetch: ->

    # jquery event hooks set directly on root element
    attr:
      change:->

  Form
  CheckBox   change = check/uncheck
  ListBox  change = select thing
  TextBox  change = keyup
  TextArea    change = keyup
  FilterBox  change = select thing
  SearchBox change = keyup

Utility Libraries

  markdown
  mustache

Examples

FAQ

Versions













###