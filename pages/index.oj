_ = require 'underscore'
# _user = require './partials/_user'
# _users = require './partials/_users'

# userEvan = name: 'Evan', height: 6.1, id: 27
# userLaura = name: 'Laura', height: 5.5, id: 823

module.exports =
  html ->
    head ->
      title 'OJ Test'
      link url:'styles/gg.css'
      script url: 'scripts/jquery.js'

    body c: 'gg', ->

      div 'Click me!',
        style: {color:'red'}
        click: -> alert('it worked!')



    #   h1 'Header'
    #   p 'Paragraphs and headers are as easy as h1 and p'

    #   h2 'Styles:'
    #   p 'Inline styles work as you would expect.',
    #     style: color:'green'

    #   require './_page'

    #   h2 'Simple partial:'


    #   ul ->
    #     li ->
    #       _user userEvan
    #     li ->
    #       _user userLaura

    #   h2 'Complex partial:'
    #   _users [userEvan, userLaura]

    #   h2 'Events'
    #   p 'When jquery is included events will bind automatically'
    #   obj = div 'Click Me',
    #     # on: ['click', (-> alert 'click the hard way')]
    #     click: ->
    #       alert 'Click worked!'
    #     mouseup: -> console.log 'mouseup'
    #     mousedown: -> console.log 'mousedown'
    #     mousemove: -> console.log 'mousemove'
    #     mouseout: ->
    #       console.log 'mouseout'
    #       $(@).css backgroundColor: 'red', color: 'white'
    #     mouseenter: ->
    #       console.log 'mouseenter'
    #       $(@).css backgroundColor: 'orange', color: 'white'
    #     c: 'gg33'
    #     style:
    #       backgroundColor: 'red', color: 'white'
    #       borderRadius: '5px'
    #       textAlign: 'center'


# load ->
#   console.log 'test.oj load'

# ready ->
#   console.log 'test.oj ready'

# assert = require 'assert'
# console = require 'console'
# crypto = require 'crypto'
# events = require 'events'
# freelist = require 'freelist'
# path = require 'path'
# punycode = require 'punycode'
# string_decoder = require 'string_decoder'
# url = require 'url'
# util = require 'util'
# tty = require 'tty'


# class View
#   constructor: ->
#     console.log "View.constructor: ", arguments

#   # awaken: ->
#   #   console.log "View.awaken: ", arguments
#   #   @isAwake = true

#   setElement: (e) ->
#     @removeEvents()
#     @$el = e
#     @bindEvents

#   $: (selector) -> @$el.find selector
#   $el: null

#   # css: selector -> styles
#   # events are done via oj

#   click: ->
#   oj: ->
#   html: ->
#     # compile(@oj()).html

# class List extends View
#   constructor: ->
#     console.log "List.constructor: ", arguments
#     super arguments
#     # args = oj.construct arguments
#     # list = args[0]

#   awaken: ->
#     console.log "List.awaken: ", arguments

# if isClient
#   window.List = List
#   window.View = View