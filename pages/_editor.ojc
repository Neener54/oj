examples = require './_examples'

editor_cs_id = oj.id()
editor_js_id = oj.id()
editor_html_id = oj.id()
editor_css_id = oj.id()

module.exports = (default_code) ->
  div c:'editor', ->
    ready ->
      setupEditor editor_cs_id, 'ojc', recompile
      setupEditor editor_js_id, 'oj', recompile
      recompile()

    css
      '.editor-source':
        position: 'relative'
        width: '100%'
        height: '30%'
        border: '2px solid #fbcb7c'
        padding: '10px'
        display: 'block'
        backgroundColor: '#fefaf3'
        boxShadow: '2px 2px 4px RGBA(0,0,0,0.15)'

      '.editor-source-cs':
        display: 'block'
        width: '100%'
        height: '100%'

      '.editor-source-cs.hidden':
        display: 'none'

      '.editor-source-js':
        display: 'block'
        width: '100%'
        height: '100%'

      '.editor-source-js.hidden':
        display: 'none'

      '.editor-source-css':
        display: 'block'
        width: '100%'
        height: '100%'

      '.editor-source-html':
        display: 'block'
        width: '100%'
        height: '100%'

      '.editor-frame':
        display: 'block'
        position: 'relative'
        width: '100%'
        height: '65%'

      '.editor-iframe':
        display: 'block'
        width: '100%'
        height: '100%'

      '.editor-console':
        position: 'absolute'
        top: 0
        left: 0
        color:'darkorange'
        backgroundColor: 'RGBA(255,255,255,0.9)'
        textAlign: 'center'
        fontSize: '18px'
        padding: '14px 4px'
        margin: '0px 0px 10px 0px'
        width: '100%'
        height: '100%'

      '.editor-resizer':
        width: '100%'
        height: '10px'
        backgroundColor: '#FFBA4D'
        zIndex: 10

      '.editor-bar':
        position:'absolute'
        top: '0px'
        right: '0px'
        margin: '8px 8px 0 0'
        height: '21px'
        zIndex: 5

      '.editor-example-chooser':
        position:'relative'
        float:'right'
        height: '100%'
        zIndex: 10
        fontSize: '20px'
        marginLeft:'8px'

      '.editor-language-tab':
        display:'inline-block'
        width: '30px'
        height: '100%'
        float: 'right'
        marginLeft: '0px'
        zIndex: 10
        backgroundColor:'white'
        border:'1px solid gray'
        borderRadius:'3px'

      '.editor-language-tab.selected':
        backgroundColor: '#FECD78'

    div c:'editor-bar', ->
      select c:'editor-example-chooser', change: ((e) -> chooseExample(e)), ->
        for ex,ix in examples
          option value:ix, "#{ex.name}"

      button 'JS', c:'editor-language-tab js', click: (e) ->
        switchLanguageTabs()
        recompile()
      button 'CS', c:'selected editor-language-tab cs', click: (e) ->
        switchLanguageTabs()
        recompile()
    div c:'editor-source', ->
      div c:'editor-source-cs', id:editor_cs_id, default_code
      div c:'editor-source-js hidden', id:editor_js_id, default_code

    div c:'editor-frame', ->
      div c:'editor-console'
      iframe c:'editor-iframe'

isCS = -> not $(".editor-source-cs").is(':hidden')

# Get value out of chooser and set the editor
chooseExample = ->
  $editorChooser = $ '.editor-example-chooser'
  ix = $editorChooser.val()
  if isCS()
    setEditor editor_cs_id, examples[ix].cs
  else
    setEditor editor_js_id, examples[ix].js
  return

switchLanguageTabs = ->
  $(".editor-language-tab.cs").toggleClass('selected')
  $(".editor-language-tab.js").toggleClass('selected')
  $(".editor-source-cs").toggleClass('hidden')
  $(".editor-source-js").toggleClass('hidden')
  chooseExample()
  recompile()

preventRecompile = false
recompile = ->
  return if preventRecompile

  $editorFrame = $ '.editor-iframe'
  $editorSource = $ '.editor-source'
  $editorHTML = $ '.editor-html'
  $editorCSS = $ '.editor-css'
  $editorJS = $ '.editor-js'

  if isCS()
    code = getEditor editor_cs_id
    console.log "code: ", code

    try
      code = CoffeeScript.compile code, bare:true
    catch eCoffee
      # Set console message
      error '<b>coffee-script error:</b> ' + eCoffee.message
      return
  else
    code = getEditor editor_js_id

  # Run the result to generate ojml
  wrapjs = "with(oj){#{code}}"
  try
    ojml = eval wrapjs
  catch eRuntime
    error '<b>runtime error:</b> ' + eRuntime.message
    return

  # Compile the ojml into dom, html and css
  try
    results = oj.compile debug:true, ojml

    # For simplicity wrap html, body, head around content if none of those tags exist
    if not results.tags.html? and not results.tags.head? and not results.tags.body?
      wrapjs = """with(oj){
        html(function(){
          head();
          body(function(){
            #{code}
          });
        })
      }
      """
      ojml = eval wrapjs
      results = oj.compile debug:true, ojml

    # Error if html, head, body are missing after all of this
    if not results.tags.html?
      error '<b>validation error</b>: <html> tag is missing'
      return
    if not results.tags.head?
      error '<b>validation error</b>: <head> tag is missing'
      return
    if not results.tags.body?
      error '<b>validation error</b>: <body> tag is missing'
      return

  catch eCompile
    # error '<b>oj error:</b> ' + eCompile.message
    console.log "failure"
    throw eCompile

    # return

  # Update html
  # setEditor editor_html_id, results.html
  $editorHTML.val results.html

  # Update css
  # setEditor editor_css_id, results.html
  $editorCSS.val results.css

  # Append html to iframe
  $editorFrame.contents().find('html').replaceWith($(results.dom))

  # Append style to iframe
  $editorFrame.contents().find('head').append("<style>#{results.css}</style>")

  success()

error = (message) ->
  $editorConsole = $('.editor-console')
  $editorConsole.html message
  $editorConsole.show()
  return

success = ->
  $editorConsole = $('.editor-console')
  $editorConsole.hide()
  return

clickToggleNext = ->
  click: (e) -> $(e.target).next().toggle()

setupEditor = (editor_id, language, onChange) ->
  editor = ace.edit editor_id
  editor.setTheme("ace/theme/orange")
  editor.setBehavioursEnabled true    # Set quote and paren auto matching
  editor.getSession().setMode "ace/mode/#{language}"
  editor.getSession().setUseSoftTabs true
  editor.getSession().setUseWorker false
  editor.setDisplayIndentGuides true
  editor.getSession().setTabSize 2
  editor.renderer.setShowGutter false
  editor.setHighlightActiveLine false
  editor.renderer.setShowPrintMargin false
  editor.setReadOnly false
  editor.setFontSize 16
  # Debounce changes because the ace editor sometimes sends multiple events for paste
  editor.getSession().doc.on 'change', _.debounce onChange, 50
  editor

setEditor = (editor_id, code) ->
  editor = ace.edit editor_id
  editor.getSession().setValue(code)
  return

getEditor = (editor_id) ->
  editor = ace.edit editor_id
  editor.getSession().getValue()
