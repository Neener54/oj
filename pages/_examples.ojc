module.exports = [
  name: ''
  cs: """
  """
  js: """
  """
,
  name: 'Headers and Paragraphs'
  cs: """
    h1 'Headers and Paragraphs'
    p 'Paragraphs and headers can be made by using tag functions.'
    p 'Live change this text to see how it works!'

    h2 'Using the Editor'
    p 'Toggle between CS/JS to switch between CoffeeScript and Javascript'
    p 'Use the listbox on the right to switch between examples.'
  """
  js: """
    h1('Headers and Paragraphs');
    p('Paragraphs and headers can be made by using tag functions.');
    p('Live change this text to see how it works!');

    h2('Using the Editor');
    p('Toggle between CS/JS to switch between CoffeeScript and Javascript');
    p('Use the listbox on the right to switch between examples.');
  """
,
  name: 'ID and Class'
  cs: """
    # Define id with 'id'
    div id:'my-id', 'This div has id "my-id".'

    # Define class with 'c' or 'class'
    div c:'my-class', 'This div has class "my-class"'
  """
  js: """
    // Define id with 'id'
    div({id:'my-id'}, 'This div has id "my-id".');

    // Define class with 'c' or 'class'
    div({c:'my-class'}, 'This div has class "my-class"');
  """
,
  name: 'Inline Styles'
  cs: """
    div 'This div has inline styles',

      # Inline styles are defined with an object
      style:

        border:'1px solid lightgrey'
        padding: '15px'

        # camalCase is automatically seperated-by-dashes
        borderRadius: '5px'
  """
  js: """
    div('This div has inline styles', {

      // Inline styles are defined with an object
      style: {

        border:'1px solid lightgrey',
        padding: '15px',

        // camalCase is automatically seperated-by-dashes
        borderRadius: '5px'
      }
    });
  """
,
  name: 'CSS Styles'
  cs: """
    div id:'my-id', 'This div has an id'
    div c:'my-class', 'This div has a class'
    div 'This div has neither'

    css

      '#my-id':
        color: 'green'

      '.my-class':
          color: 'blue'

      div:
        color: 'red'
  """
  js: """
    div({id:'my-id'}, 'This div has an id');
    div({c:'my-class'}, 'This div has a class');
    div('This div has neither');

    css({

      '#my-id':
        {color: 'green'},

      '.my-class':
          {color: 'blue'},

      div:
        {color: 'red'}
    });
  """
,
  name: 'Tags with Click Events'
  cs: """
    # Events bind automatically through jQuery
    div 'Click Me',
      click: ->
        alert 'Click works!'
  """
  js: """
    // Events bind automatically through jQuery
    div('Click Me', {
      click: function(){
        alert('Click works!');
      }
    });
  """
,
  name: 'Tags with Several Attributes'
  cs: """
    div c:'my-class', id: 'my-id',
      'This div has three attributes (click me to see)',

      # Attributes can be defined before or after the content
      'data-id': '1234'

      click: (e) ->
        $target = $(e.target)
        alert \"\"\"
          data-id: #\{$target.attr('data-id')\}
          class:   #\{$target.attr('class')\}
          id:      #\{$target.attr('id')\}
        \"\"\"
  """
  js: """
    div({c:'my-class', id: 'my-id'},
      'This div has three attributes (click me to see)', {
      // Attributes can be defined before or after the content
      'data-id': '1234',

      click: function(e) {
        $target = $(e.target)
        alert( "data-id: " + $target.attr('data-id') + "\\n" +
               "class: "   + $target.attr('class')   + "\\n" +
               "id: "      + $target.attr('id') );
      }
    });
  """
,
  name: 'Create a Type'
  cs: """
    User = type 'User',
      # Types can define constructors
      constructor: (args) ->
        # set is built into all types to bulk set properties
        @set args

      # Types can define properties
      properties:
        name: 'Default Name'
        birthDate: null

      # Types can define methods
      methods:
        age: ->
          # Calculate age from @birthDate
          today = new Date()
          age = today.getFullYear() - @birthDate.getFullYear()
          m = today.getMonth() - @birthDate.getMonth()
          if m < 0 or (m == 0 and today.getDate() < @birthDate.getDate())
            age--
          age

    user = User name: 'Joseph', birthDate: new Date 1945, 6, 23

    div user.name + " is " + user.age()
  """
  js: """

  """
,
  name: 'Create a Checkbox'
  cs: """
    CheckBox true, change: (jqueryEvent) ->
      alert "The checkbox changed to: \#{@oj.value}"
  """
  js: """
    CheckBox(true, {change: function(jqueryEvent){
      alert("The checkbox changed to: " + this.oj.value);
    }});
  """
,
  name: 'Create a TextBox'
  cs: """
    TextBox 'The text goes here'
  """
  js: """
    TextBox('The text goes here');
  """
,
  name: 'Create a TextArea'
  cs: """
    TextArea 'The text goes here'
  """
  js: """
    TextArea('The text goes here');
  """
,
  name: 'Create a ListBox'
  cs: """
    ListBox 'Red', options:['', 'Blond', 'Brown', 'Red', 'Black']
  """
  js: """
    ListBox('Red', {options:['', 'Blond', 'Brown', 'Red', 'Black']});
  """
,
  name: 'Bind a ListBox '
  cs: """
    class UserModel extends Backbone.Model
    user = new UserModel hairColor: 'Red'

    ListBox model:user, key:'hairColor', options:['', 'Blond', 'Brown', 'Red', 'Black']
    TextBox model:user, key:'hairColor'
  """
  js: """
    var UserModel = Backbone.Model.extend();
    user = new UserModel({hairColor: 'Red'});

    ListBox({model:user, key:'hairColor', options:['', 'Blond', 'Brown', 'Red', 'Black']});
    TextBox({model:user, key:'hairColor'});
  """
,
  name: 'Markdown'
  cs: """
    # Use the markdown plugin
    use require 'oj.markdown'

    # The plugin enables this function:
    markdown \"\"\"
      # Markdown

      It is _so easy_ to use markdown with oj:

      1. Just `use` the plugin
      2. Then call the `markdown` function!
    \"\"\"
  """
  js: """
    // Use the markdown plugin
    use(require('oj.markdown'));

    // The plugin enables this function:
    markdown(
      "# Markdown                                  \\n" +
      "                                            \\n" +
      "It is _so easy_ to use markdown with oj:    \\n" +
      "                                            \\n" +
      "1. Just `use` the plugin                    \\n" +
      "2. Then call the `markdown` function!       \\n"
    );
  """
,
  name: 'Mustache'
  cs: """
    # Use the mustache plugin
    use require 'oj.mustache'

    # Define data
    json =
      name:'Evan'
      twitter:'evanmoran'

    # Define a template using that data
    template = \"\"\"
      <a href='http://twitter.com/{{twitter}}'>Follow {{name}} on Twitter</a>
    \"\"\"

    # Use mustache
    mustache template, json
  """
  js: """
    // Use the mustache plugin
    use(require('oj.mustache'));

    // Define data
    var json = {
      name:'Evan',
      twitter:'evanmoran'
    };

    // Define a template using that data
    var template = "<a href='http://twitter.com/{{twitter}}'>Follow {{name}} on Twitter</a>";

    // Use mustache
    mustache(template, json);
  """
,
  name: 'Creating a Template'
  cs: """
    # Define a simple template with a title and a content function
    # Create a template that takes data as input and outputs the page
    myTemplate = (data) ->
      html ->
        head ->
          # Template the title
          title data.title
        body ->
          h1 data.header
          # Template the content
          data.content()

    # Run the template
    myTemplate title:'My Title', header:'Creating a Template', content:->
      p 'Templates are just functions that call html, head and body. Presto, they just work!'
  """
  js: """
    // Define a simple template with a title and a content function
    // Create a template that takes data as input and outputs the page
    myTemplate = function(data){ return [
      html,
        [head,
          [title, data.title]
        ],
        [body,
          [h1, data.header],
          // Template the content
          data.content
        ]
      ];
    }
    // Run the template
    myTemplate({ title:'My Title', header:'Creating a Template', content:function(){
      p('Templates are just functions that call html, head and body. Presto, they just work!');
    }});
  """
,
  name: 'Create a Partial'
  cs: """
    # Define a partial that creates a twitter link for a user
    _userTwitterLink = (user) ->
      a "Follow \#{user.name} on Twitter",
        href: "http://twitter.com/\#{user.twitter}"

    # Define some users
    users = [
      {name:'Evan', twitter:'evanmoran'}
      {name:'James', twitter:'iamthelawton'}
      {name:'Laura', twitter:'savinola'}
    ]

    p 'Partials are just functions. This function turns a user into a Twitter link:'

    for user in users
      # Use the partial!
      _userTwitterLink user
      br()
  """
  js: """
    // Define a partial that creates a twitter link for a user
    _userTwitterLink = function(user){
      a("Follow " + user.name + " on Twitter", {
        href: "http://twitter.com/" + user.twitter});
    };
    // Define some users
    users = [
      {name:'Evan', twitter:'evanmoran'},
      {name:'James', twitter:'iamthelawton'},
      {name:'Laura', twitter:'savinola'}
    ];

    p('Partials are just functions. This function turns a user into a Twitter link:');

    var user;
    for(var ix = 0; ix < users.length; ix++){
      user = users[ix];
      // Use the partial!
      _userTwitterLink(user);
      br();
    }
  """
,
  name: 'Create Template from Backbone'
  cs: """
    # Create a UserModel with name, birthDate, and age
    class UserModel extends Backbone.Model
      age: ->
        today = new Date()
        age = today.getFullYear() - @get('birthDate').getFullYear()
        m = today.getMonth() - @get('birthDate').getMonth()
        if m < 0 or (m == 0 and today.getDate() < @get('birthDate').getDate())
          age--
        age

    # Create a user template
    _userTemplate = (user) ->
      div "\#{user.get('name')} was born in \#{user.get('birthDate').getFullYear()} and is \#{user.age()}"

    # Create the user
    user = new UserModel name: 'Joseph', birthDate: new Date(1945, 6, 23)

    # Template the user
    _userTemplate user
  """
  js: """

  """
,
  name: 'Bind Model to Form Elements'
  cs: """
    # Define backbone UserModel
    class UserModel extends Backbone.Model

    # Instance user
    user = new UserModel name:'Sid', isApproved:false

    p 'Controls are bound to a model and key:'

    TextBox model:user, key:'name'
    CheckBox model:user, key:'isApproved'

    p 'Everything is syncronized:'

    TextArea model:user, key:'name'
    CheckBox model:user, key:'isApproved'
  """
  js: """
    // Define backbone UserModel
    var UserModel = Backbone.Model.extend();

    // Instance user
    user = new UserModel({name:'Sid', isApproved:false});

    p('Controls are bound to a model and key:');

    TextBox({model:user, key:'name'});
    CheckBox({model:user, key:'isApproved'});

    p('Everything is syncronized:');

    TextArea({model:user, key:'name'});
    CheckBox({model:user, key:'isApproved'});
  """
,
  name: 'Create a Table'
  cs: """
    table ->
      tbody ->
        tr ->
          td 'A1'
          td 'A2'
          td 'A3'
          td 'A4'
        tr ->
          # Loops work as you would hope!
          for cell in ['B1','B2','B3','B4']
            td cell

      css
        td:
          border: '1px solid darkorange'
          padding: 10
  """
  js: """
    table(
      [tbody,
        [tr,
          [td, 'A1'],
          [td, 'A2'],
          [td, 'A3'],
          [td, 'A4']
        ],
        function(){
          var cells = ['B1','B2','B3','B4'];
          for(var ix = 0; ix < cells.length; ix++) {
            td(cells[ix]);
          }
        }
      ]
    );
    css({
      td:{
        border: '1px solid darkorange',
        padding: 10
      }
    });
  """


  name: 'Create a Table Partial'
  cs: """
    # Create a partial that creates a table from its
    # header (a list of strings) and its rows (a list of lists)
    makeTable = (header, rows) ->

      table ->
        # Define headers
        thead ->
          tr ->
            for h in header
              th h

        # Define rows
        tbody ->
          for row in rows
            tr ->
              for column in row
                td column

    # Make it by calling the function!
    div ->
      makeTable ['H1', 'H2', 'H3', 'H4'], [
        ['A1','A2','A3','A4']
        ['B1','B2','B3','B4']
        ['C1','C2','C3','C4']
      ]
      css
        th:
          color: 'darkorange'
        td:
          backgroundColor: 'orange'
          padding:'50px'
  """
,
  name: 'Server-side Templating'
  cs: """
    ojml = oj ->
      h1 'Server side it renders html'
      div 'CSS comes down as well'

      css
        h1:
          fontSize: '23px'
          border:'1px solid red'

    # Rendering the ojml to HTML like the server would
    h2 'Render to HTML'
    TextArea (oj.toHTML ojml), style:width:400, height:100

    # Rendering the ojml to CSS like the server would
    h2 'Render to CSS'
    TextArea (oj.toCSS ojml), style:width:400, height:100

    # JS events bound on the server bind automatically on the client
    h2 'Javascript Events Bind Automatically'
    div '(CLICK ME)', click: -> alert('it works!')

  """
  js: """

    ojml = oj(function(){
      h1('Server side it renders html');
      div('CSS comes down as well');

      css({
        h1:{
          fontSize: '23px',
          border:'1px solid red'
        }
      });
    });

    // Rendering the ojml to HTML like the server would
    h2('Render to HTML');
    TextArea(oj.toHTML(ojml), {style:{width:400, height:100}});

    // Rendering the ojml to CSS like the server would
    h2('Render to CSS');
    TextArea(oj.toCSS(ojml), {style:{width:400, height:100}});

    // JS events bound on the server bind automatically on the client
    h2('Javascript Events Bind Automatically');
    div('(CLICK ME)', {click:function(){alert('it works!');}});

  """
  name: 'Table with Styles'
  cs: """
    t = Table
      header: ['h1','h2','h3']
      [1,2,3]
      [4,5,6]
      [7,8,9]
      [10,11,12]

    t.$tbody.css(color:'green')

    css
      td:
        padding:'6px'
        textAlign: 'right'
        border:'0px'

      table:
        tr:
          '&:hover':color:'red'
  """
  js: """

  """
,
  name: 'Table with Styles 2'
  cs: """
    Table
      header:['h1','h2','h3']
      [1,2,3]
      [4,5,6]

      [7,8,9]
      [10,11,12]
      style:
        width: '150px'

    css
      'td,th':
        padding:'5px'
      tbody:
        '> tr':
          borderTop:'1px solid #bbb'
      tr:
        '&:hover':
          backgroundColor:'#ddd'

      table:
        textAlign:'right'
        borderCollapse:'collapse'
  """
  js: """

  """
,
  name: 'Table with Styles 3'
  cs: """

    colWidth = 300

    tbl = Table
      header:['Header 1','Header 2','Header 3']
      [1,2,3]
      [11,12,13]
      style:
        width: colWidth + 'px'

    c1 = TextBox placeholder:'Column 1'
    c2 = TextBox placeholder:'Column 2'
    c3 = TextBox placeholder:'Column 3'

    Button 'Add Row', click: ->
      tbl.addRow [c1.value, c2.value, c3.value]

    css
      table:
        textAlign:'right'
        borderCollapse:'collapse'

        'td,th':
          padding:'5px'
        tr:
          borderTop:'1px solid #bbb'
          '&:hover':
            backgroundColor:'#ddd'


      input:
        width:colWidth/3

  """
  js: """
  """
,
  name: 'List from Collection'
  cs: """
    # Define backbone UserModel and UserCollection
    class UserModel extends Backbone.Model
    class UserCollection extends Backbone.Collection

    # Initialize collection
    user = new UserModel name:'Sid', isApproved:false
    user2 = new UserModel name:'John', isApproved:true
    user3 = new UserModel name:'Evan', isApproved:false
    users = new UserCollection [user,user2,user3]

    List collection:users, each: (v) ->
      approved = if v.get('isApproved') then 'approved' else 'not approved'
      span "\#{v.get('name')} is \#{approved}"
  """
  js: """

  """

,
  name: 'Creating an Email type (Without View Support)'
  cs: """
  """
  js: """
    // Create a Email type
    Email = oj.createType('Email', {

      // Constructor sets address prop
      constructor: function(addr){
        this.address = addr;
      },

      // Create properties
      properties: {

        // Address holds the full email
        address: 'user@example.com',

        // username comes from address
        username: {
          get: function(){
            if (!this.isValid())
              return null;
            return this.address.split(
              '@')[0];
          }
        },

        // domain comes from address
        domain: {
          get: function(){
            if (!this.isValid())
              return null;
            return this.address.split(
              '@')[1];
          }
        }
      },
      methods:{
        // Create methods
        isValid: function(){
          // '@' is before '.'
          return !!this.address.match(
            /.+@.+\..+/);
        }
      }

    });

    // Create a valid email
    var email1 = new Email('evan@ojjs.org')
    h2(email1.address);
    Table(
      ['isValid:',   email1.isValid()],
      ['Username:', email1.username],
      ['Domain:',   email1.domain]
    );

    // Create an invalid email
    var email2 = new Email('evan@gmail')

    h2(email2.address);
    // Show the properties of email
    Table(
      ['isValid:',   email2.isValid()],
      ['Username:', email2.username],
      ['Domain:',   email2.domain]
    );
  """






]



###
TwitterFollowButton 'evanmoran',
  size:'large'
  showCount:true
  showUsername:true
  showTailoring:true

###





