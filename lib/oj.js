// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayP, Control, FuncP, ObjP, coffee, exports, fs, oj, root, slice, stripBOM, t, unshift, _, _compileAny, _compileDeeper, _compileTag, _fn, _i, _len, _ref, _styleFromObject, _styleKeyFromFancy,
    __slice = [].slice;

  oj = module.exports;

  root = this;

  if (require.extensions) {
    coffee = require('coffee-script');
    fs = require(new String('fs'));
    stripBOM = function(c) {
      if (c.charCodeAt(0) === 0xFEFF) {
        c = c.slice(1);
      }
      return c;
    };
    require.extensions['.oj'] = function(module, filepath) {
      var code;
      code = stripBOM(fs.readFileSync(filepath, 'utf8'));
      try {
        code = coffee.compile(code, {
          bare: true
        });
      } catch (e) {

      }
      code = "(function(){with(require('oj')){" + code + "}}).call(this);";
      return module._compile(code, filepath);
    };
  }

  oj.version = '0.0.5';

  if (typeof module !== 'undefined') {
    exports = module.exports = oj;
  } else {
    root['oj'] = oj;
  }

  ArrayP = Array.prototype;

  FuncP = Function.prototype;

  ObjP = Object.prototype;

  slice = ArrayP.slice;

  unshift = ArrayP.unshift;

  oj._ = _ = {};

  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  _.isNumber = function(obj) {
    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));
  };

  _.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  _.isDate = function(obj) {
    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);
  };

  _.isRegExp = function(obj) {
    return toString.call(obj) === '[object RegExp]';
  };

  _.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  _.isArray = Array.isArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  _.isCapitalLetter = function(c) {
    return !!(c.match(/[A-Z]/));
  };

  _.identity = function(v) {
    return v;
  };

  _.property = function(obj, options) {
    if (options == null) {
      options = {};
    }
    return Object.defineProperty(obj, options);
  };

  _.has = function(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  _.keys = Object.keys || function(obj) {
    var key, keys;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    keys = [];
    for (key in obj) {
      if (_has(obj, key)) {
        keys[keys.length] = key;
      }
    }
    return keys;
  };

  _.values = function(obj) {
    var out;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    out = [];
    _.each(obj, function(v) {
      return out.push(v);
    });
    return out;
  };

  _.flatten = function(array, shallow) {
    return _.reduce(array, (function(memo, value) {
      if (_.isArray(value)) {
        return memo.concat(shallow ? value : _.flatten(value));
      }
      memo[memo.length] = value;
      return memo;
    }), []);
  };

  _.reduce = function(obj, iterator, memo, context) {
    var ctor, initial;
    if (obj == null) {
      obj = [];
    }
    initial = arguments.length > 2;
    if (ArrayP.reduce && obj.reduce === ArrayP.reduce) {
      if (context) {
        iterator = _.bind(iterator, context);
      }
      if (initial) {
        return obj.reduce(iterator, memo);
      } else {
        return obj.reduce(iterator);
      }
    }
    _.each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        return initial = true;
      } else {
        return memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) {
      throw new TypeError('Reduce of empty array with no initial value');
    }
    memo;

    ctor = function() {};
    return _.bind = function(func, context) {
      var args, bound;
      if (func.bind === FuncP.bind && FuncP.bind) {
        return FuncP.bind.apply(func, slice.call(arguments, 1));
      }
      if (!_.isFunction(func)) {
        throw new TypeError;
      }
      args = slice.call(arguments, 2);
      return bound = function() {
        var result, self;
        if (!(this instanceof bound)) {
          return func.apply(context, args.concat(slice.call(arguments)));
        }
        ctor.prototype = func.prototype;
        self = new ctor;
        result = func.apply(self, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return self;
      };
    };
  };

  _.sortedIndex = function(array, obj, iterator) {
    var high, low, mid;
    if (iterator == null) {
      iterator = _.identity;
    }
    low = 0;
    high = array.length;
    while (low < high) {
      mid = (low + high) >> 1;
      if (iterator(array[mid]) < iterator(obj)) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low;
  };

  _.indexOf = function(array, item, isSorted) {
    var i, v, _i, _len;
    if (array == null) {
      return -1;
    }
    if (isSorted) {
      i = _.sortedIndex(array, item);
      if (array[i] === item) {
        return i;
      } else {
        return -1;
      }
    }
    if (ArrayP.indexOf && array.indexOf === ArrayP.indexOf) {
      return array.indexOf(item);
    }
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      v = array[i];
      if (v === item) {
        return i;
      }
    }
    return -1;
  };

  _.isjQuery = function(obj) {
    return !!(obj && obj.jquery);
  };

  _.isBackbone = function(obj) {
    return !!(obj && obj.on && obj.trigger && !_.isOJ(obj));
  };

  _.isOJ = function(obj) {
    return !!(obj && (_.isString(obj.ojtype)));
  };

  _.isEmpty = function(obj) {
    var k;
    if (_.isArray(obj)) {
      return obj.length === 0;
    }
    for (k in obj) {
      if (_.has(obj, k)) {
        return false;
      }
    }
    return true;
  };

  _.typeOf = function(any) {
    var t;
    if (any === null) {
      return 'null';
    }
    t = typeof any;
    if (t === 'object') {
      if (_.isArray(any)) {
        t = 'array';
      } else if (_.isRegExp(any)) {
        t = 'regexp';
      } else if (_.isDate(any)) {
        t = 'date';
      } else if (_.isBackbone(any)) {
        t = 'backbone';
      } else if (_.isjQuery(any)) {
        t = 'jquery';
      } else if (_.isOJ(any)) {
        t = any.ojtype;
      } else {
        t = 'object';
      }
    }
    return t;
  };

  _.isObject = function(obj) {
    return (_.typeOf(obj)) === 'object';
  };

  _.clone = function(obj) {
    if (!_.isObject(obj)) {
      return obj;
    }
    if (_.isArray(obj)) {
      return obj.slice();
    } else {
      return _.extend({}, obj);
    }
  };

  oj.type = function(name, args) {
    var constructor;
    throw 'NYI';
    return constructor = function() {
      this._private = {};
      this._properties = args.properties;
      this._methods = args.methods;
      return this._fields = args.fields;
    };
  };

  oj["enum"] = function(name, args) {
    throw 'NYI';
  };

  /*
  Type = oj.type 'Foo',
    methods:
      a: ->
      b: ->
        oj.super()
    properties:
      a:
        get:
      b:
        get:
        set:
  
  type1 = new Type (arguments...)
  type2 = new Type (backboneModel)  # will call toJSON() to construct
  
  Type.addMethod(name, function)
  Type.addProperty(name, definition)
  Type.addStaticMethod(name, function)
  Type.addStaticProperty(name, definition)
  oj.type 'Type', extends: TypeBase,
  */


  _.breaker = {};

  _.each = function(col, iterator, context) {
    var i, k, v, _i, _len;
    if (col === null) {
      return;
    }
    if (ArrayP.forEach && col.forEach === ArrayP.forEach) {
      return col.forEach(iterator, context);
    } else if (_.isArray(col)) {
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        v = col[i];
        if (iterator.call(context, v, i, col) === _.breaker) {
          return _.breaker;
        }
      }
    } else {
      for (k in col) {
        v = col[k];
        if (_.has(col, k)) {
          if (iterator.call(context, v, k, col) === _.breaker) {
            return _.breaker;
          }
        }
      }
    }
  };

  _.map = function(obj, iterator, options) {
    var context, evaluate, iterator_, k, out, r, recurse, v;
    if (options == null) {
      options = {};
    }
    context = options.context;
    recurse = options.recurse;
    evaluate = options.evaluate;
    iterator_ = iterator;
    if (recurse) {
      (function(options) {
        return iterator_ = function(v, k, o) {
          var options_;
          options_ = _.extend(_.clone(options), {
            key: k,
            object: v
          });
          return _.map(v, iterator, options_);
        };
      })(options);
    }
    if (_.isFunction(obj)) {
      if (!evaluate) {
        return obj;
      }
      while (evaluate && _.isFunction(obj)) {
        obj = obj();
      }
    }
    out = obj;
    if (_.isArray(obj)) {
      out = [];
      if (!obj) {
        return out;
      }
      if (ArrayP.map && obj.map === ArrayP.map) {
        return obj.map(iterator_, context);
      }
      _.each(obj, (function(v, ix, list) {
        return out[out.length] = iterator_.call(context, v, ix, list);
      }));
      if (obj.length === +obj.length) {
        out.length = obj.length;
      }
    } else if (_.isObject(obj)) {
      out = {};
      if (!obj) {
        return out;
      }
      for (k in obj) {
        v = obj[k];
        if ((r = iterator_.call(context, v, k, obj)) !== void 0) {
          out[k] = r;
        }
      }
    } else {
      return iterator.call(context, obj, options.key, options.object);
    }
    return out;
  };

  _.extend = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var key, value, _results;
      _results = [];
      for (key in source) {
        value = source[key];
        _results.push(obj[key] = value);
      }
      return _results;
    }));
    return obj;
  };

  _.defaults = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var prop, _results;
      _results = [];
      for (prop in source) {
        if (!(obj[prop] != null)) {
          _results.push(obj[prop] = source[prop]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }));
    return obj;
  };

  oj.partial = function(module, json) {
    var m;
    m = require(module);
    if ((_.isFunction(m)) && arguments.length > 1) {
      return m.apply(null, arguments.slice(1));
    }
    return m;
  };

  oj._result = null;

  oj.tag = function() {
    var arg, args, attributes, lastResult, len, name, ojml, r, _i, _len;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!_.isString(name)) {
      throw 'oj.tag error: argument 1 is not a string (expected tag name)';
    }
    attributes = {};
    if (args.length > 0 && _.isObject(args[0])) {
      attributes = args.shift();
    }
    ojml = [name];
    if (!_.isEmpty(attributes)) {
      ojml.push(attributes);
    }
    lastResult = oj._result;
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (_.isFunction(arg)) {
        oj._result = ojml;
        len = ojml.length;
        r = arg();
        if (len === ojml.length && (r != null)) {
          ojml.push(r);
        }
      } else {
        ojml.push(arg);
      }
    }
    oj._result = lastResult;
    if (oj._result) {
      oj._result.push(ojml);
    }
    return ojml;
  };

  oj.tag.elements = {
    closed: 'aa abbr acronym address applet article aside audio b bdo big blockquote body button canvas caption center cite code colgroup command datalist dd del details dfn dir div dl dt em embed fieldset figcaption figure font footer form frameset h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins keygen kbd label legend li map mark menu meter nav noframes noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr tt u ul var video wbr xmp'.split(' '),
    open: 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ')
  };

  oj.tag.elements.all = (oj.tag.elements.closed.concat(oj.tag.elements.open)).sort();

  oj.tag.isClosed = function(tag) {
    return (_.indexOf(oj.tag.elements.open, tag, true)) === -1;
  };

  _ref = oj.tag.elements.all;
  _fn = function(t) {
    return oj[t] = function() {
      return oj.tag.apply(oj, [t].concat(__slice.call(arguments)));
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    t = _ref[_i];
    _fn(t);
  }

  oj.extend = function(context) {
    var k, o, v;
    o = {};
    for (k in oj) {
      v = oj[k];
      if (k[0] !== '_') {
        o[k] = v;
      }
    }
    delete o.extend;
    return _.extend(context, o);
  };

  oj.compile = function(ojml, options) {
    var html, out, _ref1;
    if (options == null) {
      options = {
        html: true,
        pretty: true
      };
    }
    options = _.defaults({}, options, {
      html: true,
      pretty: true
    });
    options.html = options.html ? [] : null;
    options.types = [];
    options.indent = '';
    _compileAny(ojml, options);
    html = (_ref1 = options.html) != null ? _ref1.join('') : void 0;
    return out = {
      html: html,
      types: options.types,
      js: function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = types.length; _j < _len1; _j++) {
          t = types[_j];
          _results.push(t.awaken());
        }
        return _results;
      }
    };
  };

  _styleKeyFromFancy = function(key) {
    var c, out, _j, _len1;
    out = "";
    for (_j = 0, _len1 = key.length; _j < _len1; _j++) {
      c = key[_j];
      if (_.isCapitalLetter(c)) {
        out += "-" + (c.toLowerCase());
      } else {
        out += c;
      }
    }
    return out;
  };

  _styleFromObject = function(obj) {
    var first, k, kFancy, out, _j, _len1, _ref1;
    out = "";
    first = true;
    _ref1 = _.keys(obj).sort();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      kFancy = _ref1[_j];
      k = _styleKeyFromFancy(kFancy);
      if (!first) {
        out += ';';
      }
      out += "" + k + ":" + obj[kFancy];
      first = false;
    }
    return out;
  };

  _compileDeeper = function(method, ojml, options) {
    var i;
    i = options.indent;
    options.indent += '\t';
    method(ojml, options);
    return options.indent = i;
  };

  _compileAny = function(ojml, options) {
    var _ref1, _ref2, _ref3;
    switch (_.typeOf(ojml)) {
      case 'array':
        return _compileTag(ojml, options);
      case 'oj':
        return _compileAny(ojml.oj(), options);
      case 'jquery':
        return (_ref1 = options.html) != null ? _ref1.push(ojml[0].outerHTML) : void 0;
      case 'string':
        return (_ref2 = options.html) != null ? _ref2.push(ojml) : void 0;
      case 'boolean':
      case 'number':
        return (_ref3 = options.html) != null ? _ref3.push("" + ojml) : void 0;
      case 'function':
        return _compileAny(ojml(), options);
      case 'null':
      case 'undefined':
        break;
      default:
        throw new Error('oj.compile: #{typeof ojml} cannot be compiled');
    }
  };

  _compileTag = function(ojml, options) {
    var attr, attributes, child, children, k, tag, v, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5;
    tag = ojml[0];
    if (!(_.isString(tag) && tag.length > 0)) {
      throw new Error('oj.compile: tag is missing');
    }
    if (_.isCapitalLetter(tag[0])) {
      return _compileDeeper(_compileAny, new oj[tag](ojml.slice(1)), options);
    }
    attributes = null;
    if (_.isObject(ojml[1])) {
      attributes = ojml[1];
    }
    children = attributes ? ojml.slice(2) : ojml.slice(1);
    if (options.html) {
      if (_.isObject(attributes != null ? attributes.style : void 0)) {
        attributes.style = _styleFromObject(attributes.style);
      }
      if ((attributes != null ? attributes.c : void 0) != null) {
        attributes["class"] = attributes.c;
        attributes.c = null;
      }
      if (_.isArray(attributes != null ? attributes["class"] : void 0)) {
        attributes["class"] = attributes.join(' ');
      }
      attr = "";
      if (attributes) {
        _ref1 = _.keys(attributes).sort();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          k = _ref1[_j];
          if ((v = attributes[k]) != null) {
            attr += " " + k + "=\"" + v + "\"";
          }
        }
      }
      if ((_ref2 = options.html) != null) {
        _ref2.push("<" + tag + attr + ">");
      }
    }
    if (children.length > 1) {
      for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
        child = children[_k];
        if (options.pretty) {
          if ((_ref3 = options.html) != null) {
            _ref3.push("\n\t" + options.indent);
          }
        }
        _compileDeeper(_compileAny, child, options);
      }
      if (options.pretty) {
        if ((_ref4 = options.html) != null) {
          _ref4.push("\n" + options.indent);
        }
      }
    } else {
      for (_l = 0, _len3 = children.length; _l < _len3; _l++) {
        child = children[_l];
        _compileDeeper(_compileAny, child, options);
      }
    }
    if (children.length > 0 || oj.tag.isClosed(tag)) {
      return (_ref5 = options.html) != null ? _ref5.push("</" + tag + ">") : void 0;
    }
  };

  oj.Control = Control = (function() {

    function Control() {}

    return Control;

  })();

  oj.replace = function(el, ojml) {
    var template;
    if (_.isjQuery(el)) {
      el = el.get(0);
    }
    template = oj.template(ojml);
    _.domReplaceHtml(el, template.html);
    return template.js();
  };

  _.domInsertElementAfter = function(elLocation, elToInsert) {
    var elNext, elParent;
    if (!elLocation) {
      throw new Error("domInsertElementAfter error: elementLocation is null");
    }
    if (!elToInsert) {
      throw new Error("domInsertElementAfter error: elementToInsert is null");
    }
    elNext = elLocation.nextSibling;
    elParent = elLocation.parentNode;
    if (elNext) {
      return elParent.insertBefore(elToInsert, elNext);
    } else {
      return elParent.appendChild(elToInsert);
    }
  };

  _.domReplaceHtml = function(el, html) {
    var nextSibling, parent;
    if (!el) {
      throw new Error("domReplaceHtml error: element is null");
    }
    nextSibling = el.nextSibling;
    parent = el.parentNode;
    parent.removeChild(el);
    el.innerHTML = html;
    if (nextSibling) {
      return parent.insertBefore(el, nextSibling);
    } else {
      return parent.appendChild(el);
    }
  };

  _.domAppendHtml = function(el, html) {
    var elTemp;
    if (!el) {
      throw new Error("oj.domAppendHtml: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    while (elTemp.childNodes.length) {
      el.appendChild(elTemp.childNodes[0]);
    }
    return elTemp = void 0;
  };

  _.domPrependHtml = function(el, html) {
    var elTemp;
    if (!el) {
      throw new Error("oj.domPrependHtml: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    while (elTemp.childNodes.length) {
      el.insertBefore(elTemp.childNodes[elTemp.childNodes.length - 1], el.childNodes[0]);
    }
    return elTemp = void 0;
  };

  _.domInsertHtmlBefore = function(el, html) {
    var elTemp, parent;
    if (!el) {
      throw new Error("oj.domInsertHtmlBefore: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    parent = el.parentNode;
    while (elTemp.childNodes.length) {
      parent.insertBefore(elTemp.childNodes[elTemp.childNodes.length - 1], el);
    }
    return elTemp = void 0;
  };

  _.domInsertHtmlAfter = function(el, html) {
    var elBefore, elBeforeNext, elTemp;
    if (!el) {
      throw new Error("oj.domInsertHtmlAfter: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    elBefore = el;
    while (elTemp.childNodes.length) {
      elBeforeNext = elTemp.childNodes[0];
      _.domInsertElementAfter(elBefore, elTemp.childNodes[0]);
      elBefore = elBeforeNext;
    }
    return elTemp = void 0;
  };

}).call(this);
