// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayP, FuncP, ObjP, coffee, concat, exports, fs, jqName, jqueryEvents, jqueryExtend, key, oj, ojName, pass, pathNormalizeArray, pathSplit, pathSplitRe, plugins, root, slice, stripBOM, t, unshift, wrapCSMessage, wrapJS, wrapJSMessage, _, _attributeCMeansClass, _attributeClassAllowsArrays, _attributeStyleAllowsObject, _attributesBindEventsToDOM, _attributesFilterOutEvents, _attributesFromObject, _attributesProcessedForOJ, _chars, _compileAny, _compileDeeper, _compileTag, _cssFromObject, _defaultClear, _fn, _fn1, _getInstanceOnElement, _getTagName, _i, _j, _len, _len1, _randomInteger, _readyOrLoad, _readyQueue, _ref, _ref1, _setInstanceOnElement, _setTagName, _styleFromObject, _styleKeyFromFancy, _tagAttributes,
    __slice = [].slice;

  oj = module.exports = function() {
    var ojml;
    _.argumentsPush();
    ojml = oj.emit.apply(this, arguments);
    _.argumentsPop();
    return ojml;
  };

  oj.emit = function() {
    var ojml;
    return ojml = oj.tag.apply(oj, ['oj'].concat(__slice.call(arguments)));
  };

  oj.oj = oj;

  oj.begin = function(page) {
    return _readyOrLoad(function() {
      var body, bodyOnly, d, dom, _i, _len;
      bodyOnly = {
        html: 1,
        doctype: 1,
        head: 1,
        link: 1,
        script: 1
      };
      dom = oj.compile({
        dom: 1,
        html: 0,
        css: 0,
        ignore: bodyOnly
      }, require(page)).dom;
      if (!(dom != null)) {
        console.error('oj: dom failed to compile');
        return;
      }
      body = document.getElementsByTagName('body');
      if (body.length === 0) {
        console.error('oj: <body> was not found');
        return;
      }
      body = body[0];
      body.innerHTML = '';
      if (!oj.isArray(dom)) {
        dom = [dom];
      }
      for (_i = 0, _len = dom.length; _i < _len; _i++) {
        d = dom[_i];
        body.appendChild(d);
      }
      return oj.ready();
    });
  };

  _readyOrLoad = function(fn) {
    var prevOnLoad;
    if (typeof $ !== "undefined" && $ !== null) {
      $(fn);
    } else {
      if (document.readyState !== "complete") {
        prevOnLoad = window.onload;
        window.onload = function() {
          if (typeof prevOnLoad === "function") {
            prevOnLoad();
          }
          return fn();
        };
      } else {
        fn();
      }
    }
  };

  _readyQueue = {
    queue: [],
    loaded: false
  };

  oj.ready = function(f) {
    if (oj.isUndefined(f)) {
      _readyQueue.loaded = true;
      while ((f = _readyQueue.queue.shift())) {
        f();
      }
    } else if (_readyQueue.loaded) {
      f();
    } else {
      _readyQueue.queue.push(f);
    }
  };

  oj.id = function(len, chars) {
    return 'oj' + oj.guid(len, chars);
  };

  _randomInteger = function(min, max) {
    var diff, rnd;
    if (min === null || max === null || min > max) {
      return null;
    }
    diff = max - min;
    rnd = Math.floor(Math.random() * (diff + 1));
    return rnd + min;
  };

  _chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split('');

  oj.guid = function(len, chars) {
    var base, charNext, charsPerRand, i, output, rand, randMax, randMin, _i;
    if (len == null) {
      len = 8;
    }
    if (chars == null) {
      chars = _chars;
    }
    base = chars.length;
    charsPerRand = Math.floor(Math.log(Math.pow(2, 31) - 1) / Math.log(base));
    randMin = 0;
    randMax = Math.pow(base, charsPerRand) - 1;
    output = "";
    for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
      if (i % charsPerRand === 0) {
        rand = _randomInteger(randMin, randMax);
      }
      charNext = chars[rand % base];
      output += charNext;
      rand = Math.floor(rand / base);
    }
    return output;
  };

  if (require.extensions) {
    coffee = require('coffee-script');
    fs = require(new String('fs'));
    stripBOM = function(c) {
      if (c.charCodeAt(0) === 0xFEFF) {
        return c.slice(1);
      } else {
        return c;
      }
    };
    wrapJS = function(code) {
      return "(function(){with(require('oj').sandbox){" + code + "}}).call(this);";
    };
    wrapCSMessage = function(message, filepath) {
      var _ref, _ref1;
      return "" + ((_ref = oj.codes) != null ? _ref.red : void 0) + "coffee-script error in " + filepath + ": " + message + ((_ref1 = oj.codes) != null ? _ref1.reset : void 0);
    };
    wrapJSMessage = function(message, filepath) {
      var _ref, _ref1;
      return "" + ((_ref = oj.codes) != null ? _ref.red : void 0) + "javascript error in " + filepath + ": " + message + ((_ref1 = oj.codes) != null ? _ref1.reset : void 0);
    };
    require.extensions['.oj'] = function(module, filepath) {
      var code;
      code = stripBOM(fs.readFileSync(filepath, 'utf8'));
      try {
        code = wrapJS(code);
        return module._compile(code, filepath);
      } catch (eJS) {
        eJS.message = wrapJSMessage(eJS.message, filepath);
        throw eJS;
      }
    };
    require.extensions['.ojc'] = function(module, filepath) {
      var code;
      code = stripBOM(fs.readFileSync(filepath, 'utf8'));
      try {
        code = coffee.compile(code, {
          bare: true
        });
      } catch (eCoffee) {
        eCoffee.message = wrapCSMessage(eCoffee.message, filepath);
        throw eCoffee;
      }
      try {
        code = wrapJS(code);
        return module._compile(code, filepath);
      } catch (eJS) {
        eJS.message = wrapJSMessage(eJS.message, filepath);
        throw eJS;
      }
    };
  }

  root = this;

  oj.version = '0.0.11';

  oj.isClient = true;

  if (typeof module !== 'undefined') {
    exports = module.exports = oj;
  } else {
    root['oj'] = oj;
  }

  oj.isUndefined = function(obj) {
    return obj === void 0;
  };

  oj.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  oj.isNumber = function(obj) {
    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));
  };

  oj.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  oj.isDate = function(obj) {
    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);
  };

  oj.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  oj.isArray = Array.isArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  oj.isRegEx = function(obj) {
    return toString.call(obj) === '[object RegExp]';
  };

  oj.isDOM = function(obj) {
    return !!(obj && (obj.nodeType != null));
  };

  oj.isDOMElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  oj.isDOMAttribute = function(obj) {
    return !!(obj && obj.nodeType === 2);
  };

  oj.isDOMText = function(obj) {
    return !!(obj && obj.nodeType === 3);
  };

  oj.isjQuery = function(obj) {
    return !!(obj && obj.jquery);
  };

  oj.isBackbone = function(obj) {
    return !!(obj && obj.on && obj.off && obj.trigger);
  };

  oj.isOJ = function(obj) {
    return !!(obj != null ? obj.isOJ : void 0);
  };

  oj.isArguments = function(obj) {
    return toString.call(obj) === '[object Arguments]';
  };

  oj.typeOf = function(any) {
    var t;
    if (any === null) {
      return 'null';
    }
    t = typeof any;
    if (t === 'object') {
      if (oj.isArray(any)) {
        t = 'array';
      } else if (oj.isOJ(any)) {
        t = any.typeName;
      } else if (oj.isRegEx(any)) {
        t = 'regexp';
      } else if (oj.isDate(any)) {
        t = 'date';
      } else if (oj.isDOMElement(any)) {
        t = 'element';
      } else if (oj.isDOMText(any)) {
        t = 'text';
      } else if (oj.isDOMAttribute(any)) {
        t = 'attribute';
      } else if (oj.isBackbone(any)) {
        t = 'backbone';
      } else if (oj.isjQuery(any)) {
        t = 'jquery';
      } else {
        t = 'object';
      }
    }
    return t;
  };

  oj.parse = function(str) {
    var number;
    if (str === 'undefined') {
      return void 0;
    } else if (str === 'null') {
      return null;
    } else if (str === 'true') {
      return true;
    } else if (str === 'false') {
      return false;
    } else if (!(isNaN(number = parseFloat(str)))) {
      return number;
    } else {
      return str;
    }
  };

  oj.isObject = function(obj) {
    return (oj.typeOf(obj)) === 'object';
  };

  ArrayP = Array.prototype;

  FuncP = Function.prototype;

  ObjP = Object.prototype;

  slice = ArrayP.slice;

  unshift = ArrayP.unshift;

  concat = ArrayP.concat;

  oj.__ = _ = {};

  _.isCapitalLetter = function(c) {
    return !!(c.match(/[A-Z]/));
  };

  _.identity = function(v) {
    return v;
  };

  _.property = function(obj, options) {
    if (options == null) {
      options = {};
    }
    return Object.defineProperty(obj, options);
  };

  _.has = function(obj, key) {
    return ObjP.hasOwnProperty.call(obj, key);
  };

  _.keys = Object.keys || function(obj) {
    var key, keys;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    keys = [];
    for (key in obj) {
      if (_has(obj, key)) {
        keys[keys.length] = key;
      }
    }
    return keys;
  };

  _.values = function(obj) {
    var out;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    out = [];
    _.each(obj, function(v) {
      return out.push(v);
    });
    return out;
  };

  _.flatten = function(array, shallow) {
    return _.reduce(array, (function(memo, value) {
      if (oj.isArray(value)) {
        return memo.concat(shallow ? value : _.flatten(value));
      }
      memo[memo.length] = value;
      return memo;
    }), []);
  };

  _.reduce = function(obj, iterator, memo, context) {
    var ctor, initial;
    if (obj == null) {
      obj = [];
    }
    initial = arguments.length > 2;
    if (ArrayP.reduce && obj.reduce === ArrayP.reduce) {
      if (context) {
        iterator = _.bind(iterator, context);
      }
      if (initial) {
        return obj.reduce(iterator, memo);
      } else {
        return obj.reduce(iterator);
      }
    }
    _.each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        return initial = true;
      } else {
        return memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) {
      throw new TypeError('Reduce of empty array with no initial value');
    }
    memo;

    ctor = function() {};
    return _.bind = function(func, context) {
      var args, bound;
      if (func.bind === FuncP.bind && FuncP.bind) {
        return FuncP.bind.apply(func, slice.call(arguments, 1));
      }
      if (!oj.isFunction(func)) {
        throw new TypeError;
      }
      args = slice.call(arguments, 2);
      return bound = function() {
        var result, self;
        if (!(this instanceof bound)) {
          return func.apply(context, args.concat(slice.call(arguments)));
        }
        ctor.prototype = func.prototype;
        self = new ctor;
        result = func.apply(self, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return self;
      };
    };
  };

  _.sortedIndex = function(array, obj, iterator) {
    var high, low, mid;
    if (iterator == null) {
      iterator = _.identity;
    }
    low = 0;
    high = array.length;
    while (low < high) {
      mid = (low + high) >> 1;
      if (iterator(array[mid]) < iterator(obj)) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low;
  };

  _.indexOf = function(array, item, isSorted) {
    var i, v, _i, _len;
    if (array == null) {
      return -1;
    }
    if (isSorted) {
      i = _.sortedIndex(array, item);
      if (array[i] === item) {
        return i;
      } else {
        return -1;
      }
    }
    if (ArrayP.indexOf && array.indexOf === ArrayP.indexOf) {
      return array.indexOf(item);
    }
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      v = array[i];
      if (v === item) {
        return i;
      }
    }
    return -1;
  };

  _.toArray = function(obj) {
    if (!obj) {
      return [];
    }
    if (oj.isArray(obj)) {
      return slice.call(obj);
    }
    if (oj.isArguments(obj)) {
      return slice.call(obj);
    }
    if (obj.toArray && oj.isFunction(obj.toArray)) {
      return obj.toArray();
    }
    return _.values(obj);
  };

  _.isEmpty = function(obj) {
    var k;
    if (oj.isArray(obj)) {
      return obj.length === 0;
    }
    for (k in obj) {
      if (_.has(obj, k)) {
        return false;
      }
    }
    return true;
  };

  _.clone = function(obj) {
    if (!oj.isObject(obj)) {
      return obj;
    }
    if (oj.isArray(obj)) {
      return obj.slice();
    } else {
      return _.extend({}, obj);
    }
  };

  _.contains = function(obj, target) {
    if (!(obj != null)) {
      return false;
    }
    if (ArrayP.indexOf && obj.indexOf === ArrayP.indexOf) {
      return obj.indexOf(target) !== -1;
    }
    return _.any(obj, function(value) {
      return value === target;
    });
  };

  _.some = _.any = function(obj, iterator, context) {
    var result;
    if (iterator == null) {
      iterator = _.identity;
    }
    result = false;
    if (!(obj != null)) {
      return result;
    }
    if (ArrayP.some && obj.some === ArrayP.some) {
      return obj.some(iterator, context);
    }
    _.each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) {
        return breaker;
      }
    });
    return !!result;
  };

  _.breaker = {};

  _.each = function(col, iterator, context) {
    var i, k, v, _i, _len;
    if (col === null) {
      return;
    }
    if (ArrayP.forEach && col.forEach === ArrayP.forEach) {
      return col.forEach(iterator, context);
    } else if (oj.isArray(col)) {
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        v = col[i];
        if (iterator.call(context, v, i, col) === _.breaker) {
          return _.breaker;
        }
      }
    } else {
      for (k in col) {
        v = col[k];
        if (_.has(col, k)) {
          if (iterator.call(context, v, k, col) === _.breaker) {
            return _.breaker;
          }
        }
      }
    }
  };

  _.map = function(obj, iterator, options) {
    var context, evaluate, iterator_, k, out, r, recurse, v;
    if (options == null) {
      options = {};
    }
    context = options.context;
    recurse = options.recurse;
    evaluate = options.evaluate;
    iterator_ = iterator;
    if (recurse) {
      (function(options) {
        return iterator_ = function(v, k, o) {
          var options_;
          options_ = _.extend(_.clone(options), {
            key: k,
            object: v
          });
          return _.map(v, iterator, options_);
        };
      })(options);
    }
    if (oj.isFunction(obj)) {
      if (!evaluate) {
        return obj;
      }
      while (evaluate && oj.isFunction(obj)) {
        obj = obj();
      }
    }
    out = obj;
    if (oj.isArray(obj)) {
      out = [];
      if (!obj) {
        return out;
      }
      if (ArrayP.map && obj.map === ArrayP.map) {
        return obj.map(iterator_, context);
      }
      _.each(obj, (function(v, ix, list) {
        return out[out.length] = iterator_.call(context, v, ix, list);
      }));
      if (obj.length === +obj.length) {
        out.length = obj.length;
      }
    } else if (oj.isObject(obj)) {
      out = {};
      if (!obj) {
        return out;
      }
      for (k in obj) {
        v = obj[k];
        if ((r = iterator_.call(context, v, k, obj)) !== void 0) {
          out[k] = r;
        }
      }
    } else {
      return iterator.call(context, obj, options.key, options.object);
    }
    return out;
  };

  _.extend = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var key, value, _results;
      _results = [];
      for (key in source) {
        value = source[key];
        _results.push(obj[key] = value);
      }
      return _results;
    }));
    return obj;
  };

  _.defaults = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var prop, _results;
      _results = [];
      for (prop in source) {
        if (!(obj[prop] != null)) {
          _results.push(obj[prop] = source[prop]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }));
    return obj;
  };

  _.omit = function(obj) {
    var copy, key, keys;
    copy = {};
    keys = concat.apply(ArrayP, slice.call(arguments, 1));
    for (key in obj) {
      if (!_.contains(keys, key)) {
        copy[key] = obj[key];
      }
    }
    return copy;
  };

  _.uniqueSort = function(array, isSorted) {
    var item, ix, out, _i, _len;
    if (isSorted == null) {
      isSorted = false;
    }
    if (!isSorted) {
      array.sort();
    }
    out = [];
    for (ix = _i = 0, _len = array.length; _i < _len; ix = ++_i) {
      item = array[ix];
      if (ix > 0 && array[ix - 1] === array[ix]) {
        continue;
      }
      out.push(item);
    }
    return out;
  };

  _.uniqueSortedUnion = function(array, array2) {
    return _.uniqueSort(array.concat(array2));
  };

  pathNormalizeArray = function(parts, allowAboveRoot) {
    var i, last, up;
    up = 0;
    i = parts.length - 1;
    while (i >= 0) {
      last = parts[i];
      if (last === '.') {
        parts.splice(i, 1);
      } else if (last === '..') {
        parts.splice(i, 1);
        up++;
      } else if (up) {
        parts.splice(i, 1);
        up--;
      }
      i--;
    }
    if (allowAboveRoot) {
      while (up--) {
        parts.unshift('..');
      }
    }
    return parts;
  };

  pathSplitRe = /^(\/?)([\s\S]+\/(?!$)|\/)?((?:\.{1,2}$|[\s\S]+?)?(\.[^.\/]*)?)$/;

  pathSplit = function(filename) {
    var result;
    result = pathSplitRe.exec(filename);
    return [result[1] || '', result[2] || '', result[3] || '', result[4] || ''];
  };

  _.pathResolve = function() {
    var i, path, resolvedAbsolute, resolvedPath;
    resolvedPath = '';
    resolvedAbsolute = false;
    i = arguments.length - 1;
    while (i >= -1 && !resolvedAbsolute) {
      path = i >= 0 ? arguments[i] : process.cwd();
      if ((typeof path !== 'string') || !path) {
        continue;
      }
      resolvedPath = path + '/' + resolvedPath;
      resolvedAbsolute = path.charAt(0) === '/';
      i--;
    }
    resolvedPath = pathNormalizeArray(resolvedPath.split('/').filter(function(p) {
      return !!p;
    }), !resolvedAbsolute).join('/');
    return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
  };

  _.pathNormalize = function(path) {
    var isAbsolute, trailingSlash;
    isAbsolute = path.charAt(0) === '/';
    trailingSlash = path.substr(-1) === '/';
    path = pathNormalizeArray(path.split('/').filter(function(p) {
      return !!p;
    }), !isAbsolute).join('/');
    if (!path && !isAbsolute) {
      path = '.';
    }
    if (path && trailingSlash) {
      path += '/';
    }
    return (isAbsolute ? '/' : '') + path;
  };

  _.pathJoin = function() {
    var paths;
    paths = Array.prototype.slice.call(arguments, 0);
    return _.pathNormalize(paths.filter(function(p, index) {
      return p && typeof p === 'string';
    }).join('/'));
  };

  _.pathDirname = function(path) {
    var dir, result;
    result = pathSplit(path);
    root = result[0];
    dir = result[1];
    if (!root && !dir) {
      return '.';
    }
    if (dir) {
      dir = dir.substr(0, dir.length - 1);
    }
    return root + dir;
  };

  oj.addMethods = function(obj, mapNameToMethod) {
    var method, methodName;
    for (methodName in mapNameToMethod) {
      method = mapNameToMethod[methodName];
      oj.addMethod(obj, methodName, method);
    }
  };

  oj.addMethod = function(obj, methodName, method) {
    if (!oj.isString(methodName)) {
      throw 'oj.addMethod: string expected for second argument';
    }
    if (!oj.isFunction(method)) {
      throw 'oj.addMethod: function expected for thrid argument';
    }
    Object.defineProperty(obj, methodName, {
      value: method,
      enumerable: false,
      writable: false,
      configurable: true
    });
  };

  oj.removeMethod = function(obj, methodName) {
    if (!oj.isString(methodName)) {
      throw 'oj.removeMethod: string expected for second argument';
    }
    delete obj[methodName];
  };

  oj.addProperties = function(obj, mapNameToInfo) {
    var propInfo, propName;
    for (propName in mapNameToInfo) {
      propInfo = mapNameToInfo[propName];
      if (!((propInfo != null ? propInfo.get : void 0) != null) && !((propInfo != null ? propInfo.value : void 0) != null)) {
        propInfo = {
          value: propInfo,
          writable: true
        };
      }
      oj.addProperty(obj, propName, propInfo);
    }
  };

  oj.addProperty = function(obj, propName, propInfo) {
    if (!oj.isString(propName)) {
      throw 'oj.addProperty: string expected for second argument';
    }
    if (!(oj.isObject(propInfo))) {
      throw 'oj.addProperty: object expected for third argument';
    }
    _.defaults(propInfo, {
      enumerable: true,
      configurable: true
    });
    if (Object.getOwnPropertyDescriptor(obj, propName) != null) {
      oj.removeProperty(obj, propName);
    }
    Object.defineProperty(obj, propName, propInfo);
  };

  oj.removeProperty = function(obj, propName) {
    if (!oj.isString(propName)) {
      throw 'oj.addProperty: string expected for second argument';
    }
    return delete obj[propName];
  };

  oj.isProperty = function(obj, propName) {
    if (!oj.isString(propName)) {
      throw 'oj.isProperty: string expected for second argument';
    }
    return Object.getOwnPropertyDescriptor(obj, propName).get != null;
  };

  oj.copyProperty = function(dest, source, propName) {
    var info;
    info = Object.getOwnPropertyDescriptor(source, propName);
    return Object.defineProperty(dest, propName, info);
  };

  _.argumentsStack = [];

  oj.addProperty(_, 'arguments', {
    get: function() {
      if (_.argumentsStack.length) {
        return _.argumentsStack[_.argumentsStack.length - 1];
      } else {
        return null;
      }
    }
  });

  _.argumentsPush = function(args) {
    if (args == null) {
      args = [];
    }
    _.argumentsStack.push(args);
  };

  _.argumentsPop = function() {
    if (_.argumentsStack.length) {
      return _.argumentsStack.pop();
    }
    return null;
  };

  _.argumentsAppend = function(arg) {
    if (_["arguments"]) {
      _["arguments"].push(arg);
    }
  };

  oj.tag = function() {
    var arg, args, attributes, len, name, ojml, r, _i, _j, _len, _len1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!oj.isString(name)) {
      throw 'oj.tag error: argument 1 is not a string (expected tag name)';
    }
    ojml = [name];
    attributes = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (oj.isObject(arg)) {
        _.extend(attributes, arg);
      }
    }
    attributes = _tagAttributes(name, attributes);
    if (!_.isEmpty(attributes)) {
      ojml.push(attributes);
    }
    _.argumentsPush(ojml);
    for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
      arg = args[_j];
      if (oj.isObject(arg)) {
        continue;
      } else if (oj.isFunction(arg)) {
        len = _["arguments"].length;
        r = arg();
        if (len === _["arguments"].length && (r != null)) {
          _.argumentsAppend(r);
        }
      } else {
        _.argumentsAppend(arg);
      }
    }
    _.argumentsPop();
    _.argumentsAppend(ojml);
    return ojml;
  };

  oj.tag.elements = {
    closed: 'a abbr acronym address applet article aside audio b bdo big blockquote body button canvas caption center cite code colgroup command datalist dd del details dfn dir div dl dt em embed fieldset figcaption figure font footer form frameset h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins keygen kbd label legend li map mark menu meter nav noframes noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr tt u ul var video wbr xmp'.split(' '),
    open: 'area base br col command css embed hr img input keygen link meta param source track wbr'.split(' ')
  };

  oj.tag.elements.all = (oj.tag.elements.closed.concat(oj.tag.elements.open)).sort();

  oj.tag.isClosed = function(tag) {
    return (_.indexOf(oj.tag.elements.open, tag, true)) === -1;
  };

  _setTagName = function(tag, name) {
    if (tag != null) {
      tag.name = name;
    }
  };

  _getTagName = function(tag) {
    return tag.name;
  };

  _getInstanceOnElement = function(el) {
    if ((el != null ? el.oj : void 0) != null) {
      return el.oj;
    } else {
      return null;
    }
  };

  _setInstanceOnElement = function(el, inst) {
    if (el != null) {
      el.oj = inst;
    }
  };

  _ref = oj.tag.elements.all;
  _fn = function(t) {
    oj[t] = function() {
      return oj.tag.apply(oj, [t].concat(__slice.call(arguments)));
    };
    return _setTagName(oj[t], t);
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    t = _ref[_i];
    _fn(t);
  }

  _defaultClear = function(dest, d, e) {
    var k;
    _.defaults(dest, d);
    for (k in e) {
      delete dest[k];
    }
    return dest;
  };

  _tagAttributes = function(name, attributes) {
    var attr;
    attr = _.clone(attributes);
    switch (name) {
      case 'link':
        _defaultClear(attr, {
          rel: 'stylesheet',
          type: 'text/css',
          href: attr.url || attr.src
        }, {
          url: 0,
          src: 0
        });
        break;
      case 'script':
        _defaultClear(attr, {
          type: 'text/javascript',
          src: attr.url
        }, {
          url: 0
        });
        break;
      case 'a':
        _defaultClear(attr, {
          href: attr.url
        }, {
          url: 0
        });
    }
    return attr;
  };

  oj.page = function(options, content) {
    if (!(content != null)) {
      content = options;
      options = {};
    }
    return oj.html(function() {
      oj.head(function() {
        if (options.title != null) {
          return oj.title(options.title);
        }
      });
      return oj.body(function() {
        return content();
      });
    });
  };

  oj.extend = function(context) {
    var k, o, v;
    o = {};
    for (k in oj) {
      v = oj[k];
      if (k[0] !== '_') {
        o[k] = v;
      }
    }
    delete o.extend;
    return _.extend(context, o);
  };

  oj.compile = function(options, ojml) {
    var css, dom, html, out;
    if (!(ojml != null)) {
      ojml = options;
      options = {};
    }
    options = _.defaults({}, options, {
      html: true,
      dom: true,
      css: true,
      debug: false,
      ignore: {}
    });
    _.extend(options.ignore, {
      oj: 1,
      css: 1
    });
    options.html = options.html ? [] : null;
    options.dom = options.dom && (typeof document !== "undefined" && document !== null) ? document.createElement('OJ') : null;
    options.css = options.css ? {} : null;
    options.indent = '';
    options.types = [];
    options.tags = {};
    _compileAny(ojml, options);
    if (options.css) {
      css = _cssFromObject(options.css, options.debug);
    }
    if (options.html != null) {
      html = options.html.join('');
    }
    if (options.dom != null) {
      dom = options.dom.childNodes;
      if (dom.length != null) {
        dom = _.toArray(dom);
        dom = dom.filter(function(v) {
          return oj.isDOM(v);
        });
      }
      if (dom.length === 0) {
        dom = null;
      } else if (dom.length === 1) {
        dom = dom[0];
      }
    }
    out = {
      html: html,
      dom: dom,
      css: css,
      types: options.types,
      tags: options.tags
    };
    return out;
  };

  _styleKeyFromFancy = function(key) {
    var c, out, _j, _len1;
    out = "";
    for (_j = 0, _len1 = key.length; _j < _len1; _j++) {
      c = key[_j];
      if (_.isCapitalLetter(c)) {
        out += "-" + (c.toLowerCase());
      } else {
        out += c;
      }
    }
    return out;
  };

  _styleFromObject = function(obj, options) {
    var indent, ix, k, kFancy, keys, newline, out, semi, _j, _len1;
    if (options == null) {
      options = {};
    }
    _.defaults(options, {
      inline: true,
      indent: false
    });
    options.semi = !options.inline;
    out = "";
    keys = _.keys(obj).sort();
    indent = options.indent ? '\t' : '';
    newline = options.inline ? '' : '\n';
    for (ix = _j = 0, _len1 = keys.length; _j < _len1; ix = ++_j) {
      kFancy = keys[ix];
      semi = options.semi || ix !== keys.length - 1 ? ";" : '';
      k = _styleKeyFromFancy(kFancy);
      out += "" + indent + k + ":" + obj[kFancy] + semi + newline;
    }
    return out;
  };

  _attributesFromObject = function(obj) {
    var k, out, space, v, _j, _len1, _ref1;
    if (!oj.isObject(obj)) {
      return obj;
    }
    out = '';
    space = '';
    _ref1 = _.keys(obj).sort();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      k = _ref1[_j];
      if ((v = obj[k]) != null) {
        out += "" + space + k + "=\"" + v + "\"";
      }
      space = ' ';
    }
    return out;
  };

  _cssFromObject = function(cssMap, isDebug) {
    var css, indent, inline, newline, rules, selector, space, styles;
    if (isDebug == null) {
      isDebug = false;
    }
    newline = isDebug ? '\n' : '';
    space = isDebug ? ' ' : '';
    inline = !isDebug;
    indent = isDebug;
    css = '';
    for (selector in cssMap) {
      styles = cssMap[selector];
      rules = _styleFromObject(styles, {
        inline: inline,
        indent: indent
      });
      css += "" + selector + space + "{" + newline + rules + "}" + newline;
    }
    return css;
  };

  _compileDeeper = function(method, ojml, options) {
    var i;
    i = options.indent;
    options.indent += '\t';
    method(ojml, options);
    return options.indent = i;
  };

  pass = function() {};

  _compileAny = function(ojml, options) {
    var els, _ref1, _ref10, _ref11, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
    switch (oj.typeOf(ojml)) {
      case 'array':
        _compileTag(ojml, options);
        break;
      case 'jquery':
        if ((_ref1 = options.html) != null) {
          _ref1.push(ojml.html());
        }
        if ((_ref2 = options.dom) != null) {
          _ref2.concat(ojml.get());
        }
        break;
      case 'string':
        if ((_ref3 = options.html) != null) {
          _ref3.push(ojml);
        }
        if (ojml.length > 0 && ojml[0] === '<') {
          root = document.createElement('div');
          root.innerHTML = ojml;
          els = root.childNodes;
          if ((_ref4 = options.dom) != null) {
            _ref4.appendChild(root);
          }
        } else {
          if ((_ref5 = options.dom) != null) {
            _ref5.appendChild(document.createTextNode(ojml));
          }
        }
        break;
      case 'boolean':
      case 'number':
        if ((_ref6 = options.html) != null) {
          _ref6.push("" + ojml);
        }
        if ((_ref7 = options.dom) != null) {
          _ref7.appendChild(document.createTextNode("" + ojml));
        }
        break;
      case 'function':
        _compileAny(oj(ojml), options);
        break;
      case 'date':
        if ((_ref8 = options.html) != null) {
          _ref8.push("" + (ojml.toLocaleString()));
        }
        if ((_ref9 = options.dom) != null) {
          _ref9.appendChild(document.createTextNode("" + (ojml.toLocaleString())));
        }
        break;
      case 'null':
        break;
      case 'undefined':
        break;
      case 'object':
        break;
      default:
        if (oj.isOJ(ojml)) {
          if ((_ref10 = options.html) != null) {
            _ref10.push(ojml.el.outerHTML);
          }
          if ((_ref11 = options.dom) != null) {
            _ref11.appendChild(ojml.el);
          }
        }
    }
  };

  jqueryEvents = {
    bind: 1,
    on: 1,
    off: 1,
    live: 1,
    blur: 1,
    change: 1,
    click: 1,
    dblclick: 1,
    focus: 1,
    focusin: 1,
    focusout: 1,
    hover: 1,
    keydown: 1,
    keypress: 1,
    keyup: 1,
    mousedown: 1,
    mouseenter: 1,
    mousemove: 1,
    mouseout: 1,
    mouseup: 1,
    ready: 1,
    resize: 1,
    scroll: 1,
    select: 1
  };

  _compileTag = function(ojml, options) {
    var attr, attrName, attrValue, attributes, child, children, el, events, selector, space, styles, tag, tagType, _base, _j, _k, _len1, _len2, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6;
    if (ojml.length === 0) {
      return;
    }
    tag = ojml[0];
    tagType = typeof tag;
    tag = (tagType === 'function' || tagType === 'object') && (_getTagName(tag) != null) ? _getTagName(tag) : tag;
    if (!(oj.isString(tag) && tag.length > 0)) {
      throw new Error('oj.compile: tag name is missing');
    }
    if (_.isCapitalLetter(tag[0])) {
      return _compileDeeper(_compileAny, new oj[tag](ojml.slice(1)), options);
    }
    options.tags[tag] = true;
    attributes = null;
    if (oj.isObject(ojml[1])) {
      attributes = ojml[1];
    }
    children = attributes ? ojml.slice(2) : ojml.slice(1);
    if (options.css && tag === 'css') {
      for (selector in attributes) {
        styles = attributes[selector];
        if ((_ref1 = (_base = options.css)[selector]) == null) {
          _base[selector] = styles;
        }
        _.extend(options.css[selector], styles);
      }
    }
    if (!options.ignore[tag]) {
      events = _attributesProcessedForOJ(attributes);
      if (options.dom && (typeof document !== "undefined" && document !== null)) {
        el = document.createElement(tag);
        if (oj.isDOMElement(options.dom)) {
          options.dom.appendChild(el);
        }
        options.dom = el;
        if (oj.isObject(attributes)) {
          _ref2 = _.keys(attributes).sort();
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            attrName = _ref2[_j];
            attrValue = attributes[attrName];
            el.setAttribute(attrName, attrValue);
          }
        }
        _attributesBindEventsToDOM(events, el);
      }
      if (options.html) {
        attr = (_ref3 = _attributesFromObject(attributes)) != null ? _ref3 : '';
        space = attr === '' ? '' : ' ';
        options.html.push("<" + tag + space + attr + ">");
      }
    }
    for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
      child = children[_k];
      if (options.debug && children.length > 1) {
        if ((_ref4 = options.html) != null) {
          _ref4.push("\n\t" + options.indent);
        }
      }
      _compileDeeper(_compileAny, child, options);
    }
    if (options.debug && children.length > 1) {
      if ((_ref5 = options.html) != null) {
        _ref5.push("\n" + options.indent);
      }
    }
    if (!options.ignore[tag]) {
      if (options.html && (children.length > 0 || oj.tag.isClosed(tag))) {
        if ((_ref6 = options.html) != null) {
          _ref6.push("</" + tag + ">");
        }
      }
      if (options.dom) {
        options.dom = options.dom.parentNode;
      }
    }
  };

  _attributeStyleAllowsObject = function(attr) {
    if (oj.isObject(attr != null ? attr.style : void 0)) {
      attr.style = _styleFromObject(attr.style, {
        inline: true
      });
    }
  };

  _attributeCMeansClass = function(attr) {
    if ((attr != null ? attr.c : void 0) != null) {
      attr["class"] = attr.c;
      delete attr.c;
    }
  };

  _attributeClassAllowsArrays = function(attr) {
    if (oj.isArray(attr != null ? attr["class"] : void 0)) {
      attr["class"] = attr.join(' ');
    }
  };

  _attributesFilterOutEvents = function(attr) {
    var k, out, v;
    out = {};
    if (oj.isObject(attr)) {
      for (k in attr) {
        v = attr[k];
        if (jqueryEvents[k] != null) {
          out[k] = v;
          delete attr[k];
        }
      }
    }
    return out;
  };

  _attributesProcessedForOJ = function(attr) {
    var events;
    _attributeCMeansClass(attr);
    _attributeStyleAllowsObject(attr);
    _attributeClassAllowsArrays(attr);
    events = _attributesFilterOutEvents(attr);
    return events;
  };

  _attributesBindEventsToDOM = function(events, el) {
    var ek, ev, _results;
    _results = [];
    for (ek in events) {
      ev = events[ek];
      if (typeof $ !== "undefined" && $ !== null) {
        if (oj.isArray(ev)) {
          _results.push($(el)[ek].apply(this, ev));
        } else {
          _results.push($(el)[ek](ev));
        }
      } else {
        _results.push(console.error("oj: jquery is missing when binding a '" + ek + "' event"));
      }
    }
    return _results;
  };

  oj.toDOM = function(options, ojml) {
    var result;
    if (!oj.isObject(options)) {
      ojml = options;
      options = {};
    }
    _.extend(options, {
      dom: true,
      html: true,
      css: true
    });
    result = oj.compile(options, ojml);
    if (typeof result.js === "function") {
      result.js();
    }
    return result.dom;
  };

  oj.toHTML = function(options, ojml) {
    if (!oj.isObject(options)) {
      ojml = options;
      options = {};
    }
    _.extend(options, {
      dom: false,
      js: false,
      html: true,
      css: false
    });
    return (oj.compile(options, ojml)).html;
  };

  oj.toCSS = function(options, ojml) {
    if (!oj.isObject(options)) {
      ojml = options;
      options = {};
    }
    _.extend(options, {
      dom: false,
      js: false,
      html: false,
      css: true
    });
    return (oj.compile(options, ojml)).css;
  };

  _.inherit = function(child, parent) {
    var ctor, key;
    for (key in parent) {
      oj.copyProperty(child, parent, key);
    }
    ctor = function() {};
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.base = parent.prototype;
  };

  oj.argumentShift = function(args, key) {
    var value;
    if ((oj.isObject(args)) && (key != null) && (args[key] != null)) {
      value = args[key];
      delete args[key];
    }
    return value;
  };

  oj.type = function(name, args) {
    var Out, delay, methodKeys, methods, propKeys, properties, typeProps, _ref1, _ref2;
    if (args == null) {
      args = {};
    }
    if (!oj.isString(name)) {
      throw 'oj.type: string expected for first argument';
    }
    if (!oj.isObject(args)) {
      throw 'oj.type: object expected for second argument';
    }
    if ((_ref1 = args.methods) == null) {
      args.methods = {};
    }
    if ((_ref2 = args.properties) == null) {
      args.properties = {};
    }
    delay = '__DELAYED__';
    Out = new Function("return function " + name + "(){\n  var _this = this;\n  if ( !(this instanceof " + name + ") )\n    _this = new " + name + "('" + delay + "');\n\n  if (arguments && arguments[0] != '" + delay + "')\n    " + name + ".prototype.constructor.apply(_this, arguments);\n\n  return _this;\n}")();
    if ((args.base != null) && ((!(args.constructor != null)) || (!args.hasOwnProperty('constructor')))) {
      args.constructor = function() {
        var _ref3;
        return (_ref3 = Out.base) != null ? _ref3.constructor.apply(this, arguments) : void 0;
      };
    }
    if (args.base != null) {
      _.inherit(Out, args.base);
    }
    oj.addMethod(Out.prototype, 'constructor', args.constructor);
    typeProps = {
      type: {
        value: Out,
        writable: false,
        enumerable: false
      },
      typeName: {
        value: name,
        writable: false,
        enumerable: false
      },
      isOJ: {
        value: true,
        writable: false,
        enumerable: false
      }
    };
    oj.addProperties(Out, typeProps);
    oj.addProperties(Out.prototype, typeProps);
    propKeys = (_.keys(args.properties)).sort();
    if (Out.prototype.properties != null) {
      propKeys = _.uniqueSortedUnion(Out.prototype.properties, propKeys);
    }
    properties = {
      value: propKeys,
      writable: false,
      enumerable: false
    };
    oj.addProperty(Out.prototype, 'properties', properties);
    methodKeys = (_.keys(args.methods)).sort();
    if (Out.prototype.methods != null) {
      methodKeys = _.uniqueSortedUnion(Out.prototype.methods, methodKeys);
    }
    methods = {
      value: methodKeys,
      writable: false,
      enumerable: false
    };
    oj.addProperty(Out.prototype, 'methods', methods);
    _.extend(args.methods, {
      get: function(k) {
        var out, p, _j, _len1, _ref3;
        if (oj.isString(k)) {
          if (this.has(k)) {
            return this[k];
          } else {
            return void 0;
          }
        } else {
          out = {};
          _ref3 = this.properties;
          for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
            p = _ref3[_j];
            out[p] = this[p];
          }
          return out;
        }
      },
      set: function(k, v) {
        var key, obj, value;
        obj = k;
        if (!oj.isObject(k)) {
          obj = {};
          obj[k] = v;
        }
        for (key in obj) {
          value = obj[key];
          if (this.has(key)) {
            this[key] = value;
          }
        }
      },
      has: function(k) {
        return _.some(this.properties, function(v) {
          return v === k;
        });
      },
      can: function(k) {
        return _.some(this.methods, function(v) {
          return v === k;
        });
      },
      toJSON: function() {
        var json, prop, _j, _len1, _ref3;
        json = {};
        _ref3 = this.properties;
        for (_j = 0, _len1 = _ref3.length; _j < _len1; _j++) {
          prop = _ref3[_j];
          json[prop] = this[prop];
        }
        return json;
      }
    });
    oj.addMethods(Out.prototype, args.methods);
    oj.addProperties(Out.prototype, args.properties);
    return Out;
  };

  oj.argumentsUnion = function(argList) {
    var list, obj, v, _j, _len1;
    obj = {};
    list = [];
    for (_j = 0, _len1 = argList.length; _j < _len1; _j++) {
      v = argList[_j];
      if (oj.isObject(v)) {
        obj = _.extend(obj, v);
      } else {
        list.push(v);
      }
    }
    return {
      options: obj,
      args: list
    };
  };

  oj["enum"] = function(name, args) {
    throw 'NYI';
  };

  oj.View = oj.type('View', {
    constructor: function(options) {
      var emit, _ref1, _ref2;
      if (options == null) {
        options = {};
      }
      if (!oj.isDOM(this.el)) {
        throw new Error("oj." + this.typeName + ": constructor failed to set this.el");
      }
      _setInstanceOnElement(this.el, this);
      emit = (_ref1 = oj.argumentShift(options, 'emit')) != null ? _ref1 : true;
      if (emit) {
        this.emit();
      }
      if ((_ref2 = options.id) == null) {
        options.id = oj.id();
      }
      this.$el.addClass("oj-" + this.typeName);
      this.set(options);
      options = _.omit.apply(_, [options].concat(__slice.call(this.properties)));
      return this.addAttributes(options);
    },
    properties: {
      el: {
        get: function() {
          return this._el;
        },
        set: function(v) {
          this._el = v;
          this._$el = null;
        }
      },
      $el: {
        get: function() {
          return this._$el || (this._$el = $(this.el));
        }
      },
      attributes: {
        get: function() {
          var out;
          out = {};
          $.each(this.el.attributes, function(index, attr) {
            return out[attr.name] = attr.value;
          });
          return out;
        }
      },
      id: {
        get: function() {
          return this.$el.attr('id');
        },
        set: function(v) {
          return this.$el.attr('id', v);
        }
      }
    },
    methods: {
      $: function() {
        var _ref1;
        return (_ref1 = this.$el).find.apply(_ref1, arguments);
      },
      addAttribute: function(name, value) {
        var attr;
        attr = {};
        attr[name] = value;
        return this.addAttributes(attr);
      },
      addAttributes: function(attributes) {
        var attr, events, k, v;
        attr = _.clone(attributes);
        events = _attributesProcessedForOJ(attr);
        if (oj.isObject(attr)) {
          for (k in attr) {
            v = attr[k];
            if (k === 'class') {
              this.$el.addClass(v);
            } else {
              this.$el.attr(k, v);
            }
          }
        }
        if (events != null) {
          _attributesBindEventsToDOM(events, this.el);
        }
      },
      removeAttribute: function(name) {
        var attr;
        attr = {};
        attr[name] = 1;
        return this.removeAttribute(attr);
      },
      removeAttributes: function(attributes) {
        var k, _j, _len1;
        if (oj.isObject(attributes)) {
          for (k in attributes) {
            this.$el.removeAttr(k);
          }
        } else if (oj.isArray(attributes)) {
          for (_j = 0, _len1 = attributes.length; _j < _len1; _j++) {
            k = attributes[_j];
            this.$el.removeAttr(k);
          }
        }
      },
      toHTML: function(options) {
        return this.el.outerHTML + ((options != null ? options.debug : void 0) ? '\n' : '');
      },
      toDOM: function() {
        return this.el;
      },
      toString: function() {
        return this.toHTML();
      },
      detach: function() {
        throw 'detach nyi';
      },
      attach: function() {
        throw 'attach nyi';
      },
      emit: function() {
        _.argumentsAppend(this);
      }
    }
  });

  oj.ModelsView = oj.type('ModelsView', {
    base: oj.View,
    constructor: function(options) {
      this.each = oj.argumentShift(options, 'each');
      this.models = oj.argumentShift(options, 'models');
      return oj.ModelsView.base.constructor.apply(this, arguments);
    },
    properties: {
      each: {
        get: function() {
          return this._each;
        },
        set: function(v) {
          this._each = v;
          this.make();
        }
      },
      models: {
        get: function() {
          return this._models;
        },
        set: function(v) {
          if (oj.isBackbone(this._models)) {
            this._models.off('add remove change sync', null, this);
          }
          this._models = v;
          if (oj.isBackbone(this._models)) {
            this._models.on('add', this.modelAdded, this);
            this._models.on('remove', this.modelRemoved, this);
            this._models.on('change', this.modelChanged, this);
            this._models.on('sync', this.modelSynced, this);
          }
          this.make();
        }
      }
    },
    methods: {
      make: function() {
        throw "oj." + typeName + ": make not implemented";
      },
      modelsChanged: function() {
        return this.make();
      },
      modelSynced: function(model, collection, options) {
        console.log("ModelsView.modelSynced: ", arguments);
        return this.make();
      },
      modelAdded: function(model, collection, options) {
        console.log("ModelsView.modelAdded: ", arguments);
        return this.make();
      },
      modelRemoved: function(model, collection, options) {
        console.log("ModelsView.modelRemoved: ", arguments);
        return this.make();
      },
      modelChanged: function(model, collection, options) {
        return console.log("ModelsView.modelChanged: ", arguments);
      }
    }
  });

  oj.ModelView = oj.type('ModelView', {
    base: oj.View,
    constructor: function(options) {
      if ((options != null ? options.value : void 0) != null) {
        this.value = oj.argumentShift(options, 'value');
      }
      if ((options != null ? options.model : void 0) != null) {
        this.model = oj.argumentShift(options, 'model');
      }
      return oj.ModelView.base.constructor.apply(this, arguments);
    },
    properties: {
      model: {
        get: function() {
          return this._model;
        },
        set: function(v) {
          if (oj.isBackbone(this._model)) {
            this._model.off('change', null, this);
          }
          this._model = v;
          if (oj.isBackbone(this._model)) {
            this._model.on('change', this.modelChanged, this);
          }
          this.modelChanged();
        }
      }
    },
    methods: {
      modelChanged: function() {
        var _this = this;
        return this.$el.oj(function() {
          return _this.make(_this.mode);
        });
      },
      make: function(model) {
        throw "oj." + this.typeName + ": make not implemented";
      }
    }
  });

  oj.ModelKeyView = oj.type('ModelKeyView', {
    base: oj.ModelView,
    constructor: function(args) {
      this.key = oj.argumentShift(args, 'key');
      if ((args != null ? args.live : void 0) != null) {
        this.live = oj.argumentShift(args, 'live');
      }
      return oj.ModelKeyView.base.constructor.apply(this, arguments);
    },
    properties: {
      key: null,
      live: true,
      value: {
        get: function() {
          throw "" + this.typeName + " value getter not implemented";
        },
        set: function(v) {
          throw "" + this.typeName + " value setter not implemented";
        }
      }
    },
    methods: {
      modelChanged: function() {
        if ((this.model != null) && (this.key != null)) {
          if (!this._viewUpdatedModel) {
            this.value = this.model.get(this.key);
          }
        }
      },
      viewChanged: function() {
        var _this = this;
        setTimeout((function() {
          if ((_this.model != null) && (_this.key != null)) {
            _this._viewUpdatedModel = true;
            _this.model.set(_this.key, _this.value);
            _this._viewUpdatedModel = false;
          }
        }), 10);
      }
    }
  });

  oj.TextBox = oj.type('TextBox', {
    base: oj.ModelKeyView,
    constructor: function() {
      var args, options, _ref1,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      console.log("args: ", args);
      console.log("options: ", options);
      this.el = oj.argumentShift(options, 'el') || oj.toDOM(function() {
        return oj.input({
          type: 'text'
        }, {
          keydown: function() {
            if (_this.live) {
              _this.viewChanged();
            }
          },
          keyup: function() {
            if (_this.live) {
              _this.viewChanged();
            }
          },
          change: function() {
            _this.viewChanged();
          }
        });
      });
      if (args.length > 0) {
        console.log("length > 0: oj.coffee:1906");
        this.value = args[0];
      }
      return oj.TextBox.base.constructor.apply(this, [options]);
    },
    properties: {
      value: {
        get: function() {
          var v;
          v = this.el.value;
          if (!(v != null) || v === 'undefined') {
            v = '';
          }
          return v;
        },
        set: function(v) {
          console.log("setting v: ", v);
          this.el.value = v;
        }
      }
    }
  });

  oj.CheckBox = oj.type('CheckBox', {
    base: oj.ModelKeyView,
    constructor: function() {
      var args, options, _ref1,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      this.el = oj.argumentShift(options, 'el') || oj.toDOM(function() {
        return oj.input({
          type: 'checkbox'
        }, {
          change: function() {
            _this.viewChanged();
          }
        });
      });
      if (args.length > 0) {
        this.value = args[0];
      }
      return oj.CheckBox.base.constructor.call(this, options);
    },
    properties: {
      value: {
        get: function() {
          return this.el.checked;
        },
        set: function(v) {
          v = !!v;
          this.el.checked = v;
          if (v) {
            this.$el.attr('checked', 'checked');
          } else {
            this.$el.removeAttr('checked');
          }
        }
      }
    }
  });

  oj.TextArea = oj.type('TextArea', {
    base: oj.ModelKeyView,
    constructor: function() {
      var args, options, _ref1,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      this.el = oj.argumentShift(options, 'el') || oj.toDOM(function() {
        return oj.textarea({
          keydown: function() {
            if (_this.live) {
              _this.viewChanged();
            }
          },
          keyup: function() {
            if (_this.live) {
              _this.viewChanged();
            }
          },
          change: function() {
            _this.viewChanged();
          }
        });
      });
      if (args.length > 0) {
        this.value = args[0];
      }
      return oj.TextArea.base.constructor.call(this, options);
    },
    properties: {
      value: {
        get: function() {
          return this.el.value;
        },
        set: function(v) {
          this.el.value = v;
        }
      }
    }
  });

  oj.ListBox = oj.type('ListBox', {
    base: oj.ModelKeyView,
    constructor: function() {
      var args, options, _ref1,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      this.el = oj.argumentShift(options, 'el') || oj.toDOM(function() {
        return oj.select({
          change: function() {
            _this.viewChanged();
          }
        });
      });
      this.options = oj.argumentShift(options, 'options');
      if (args.length > 0) {
        this.value = args[0];
      }
      return oj.ListBox.base.constructor.apply(this, [options]);
    },
    properties: {
      value: {
        get: function() {
          return this.$el.val();
        },
        set: function(v) {
          this.$el.val(v);
        }
      },
      options: {
        get: function() {
          return this._options;
        },
        set: function(v) {
          if (!oj.isArray(v)) {
            throw new Error('oj.ListBox::options array is missing');
          }
          this._options = v;
          this.$el.oj(function() {
            var op, _j, _len1;
            for (_j = 0, _len1 = v.length; _j < _len1; _j++) {
              op = v[_j];
              oj.option(op);
            }
          });
        }
      }
    }
  });

  oj.Button = oj.type('Button', {
    base: oj.View,
    constructor: function(args) {
      var options, _ref1, _ref2,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      if ((_ref2 = options.label) == null) {
        options.label = args.length > 0 ? args[0] : '';
      }
      this.el = oj.argumentShift(args, 'el') || oj.toDOM(function() {
        return oj.button(options.label);
      });
      return oj.Button.base.constructor.apply(this, [options]);
    }
  });

  oj.List = oj.type('List', {
    base: oj.ModelsView,
    constructor: function() {
      var args, options, _ref1, _ref2,
        _this = this;
      _ref1 = oj.argumentsUnion(arguments), options = _ref1.options, args = _ref1.args;
      this._ordered = oj.argumentShift(options, 'ordered');
      this._tagName = oj.argumentShift(options, 'tagName');
      this.itemTagName = oj.argumentShift(options, 'itemTagName');
      this.el = oj.argumentShift(options, 'el') || oj.toDOM(function() {
        return oj[_this.tagName]();
      });
      if ((_ref2 = options.each) == null) {
        options.each = function(model, el) {
          var id, v;
          id = (model != null ? model.id : void 0) != null ? {
            id: model.id
          } : null;
          if (((model != null ? model.toJSON : void 0) != null) || oj.isObject(model)) {
            v = JSON.stringify(model.toJSON());
          } else {
            v = model;
          }
          el(v, id);
        };
      }
      this.items = oj.argumentShift(options, 'items');
      if (this.items.length === 0 && args.length > 0) {
        this.items = args;
      }
      return oj.List.base.constructor.apply(this, [options]);
    },
    properties: {
      ordered: {
        get: function() {
          var _ref1;
          return (_ref1 = this._ordered) != null ? _ref1 : false;
        }
      },
      tagName: {
        get: function() {
          var _ref1;
          return (_ref1 = this._tagName) != null ? _ref1 : (this.ordered ? 'ol' : 'ul');
        }
      },
      $itemsEl: {
        get: function() {
          return this.$("> " + this.itemTagName);
        }
      },
      itemsEl: {
        get: function() {
          return this.$itemsEl.get();
        }
      },
      items: {
        get: function() {
          if (this._items != null) {
            return this._items;
          }
          return this._items = this.$itemsEl.ojValue();
        },
        set: function(v) {
          this._items = v != null ? v : [];
          this.make();
        }
      },
      count: {
        get: function() {
          return this.$itemsEl.length;
        }
      },
      itemTagName: {
        get: function() {
          var _ref1;
          return (_ref1 = this._itemTagName) != null ? _ref1 : 'li';
        },
        set: function(v) {
          this._itemTagName = oj.isObject(v) ? _getTagName(v) : v;
          if (this.el != null) {
            this.make();
          }
        }
      }
    },
    methods: {
      itemEl: function(ix) {
        return this.$itemsEl[ix];
      },
      $itemEl: function(ix) {
        return $(this.itemEl(ix));
      },
      item: function(ix) {
        return this.$itemEl(ix).ojValue();
      },
      make: function() {
        var models,
          _this = this;
        if (this.el == null) {
          return;
        }
        if ((this.models != null) && (this.each != null)) {
          models = oj.isBackbone(this._models) ? this._models.models : this._models;
          return this.$el.oj(function() {
            var model, _j, _len1, _results;
            _results = [];
            for (_j = 0, _len1 = models.length; _j < _len1; _j++) {
              model = models[_j];
              _results.push(oj[_this.itemTagName](function() {
                return oj.emit(_this.each(model));
              }));
            }
            return _results;
          });
        } else if (this.items != null) {
          return this.$el.oj(function() {
            var item, _j, _len1, _ref1, _results;
            _ref1 = _this.items;
            _results = [];
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              item = _ref1[_j];
              _results.push(oj[_this.itemTagName](item));
            }
            return _results;
          });
        }
      },
      add: function(ix, ojml) {
        if (ix == null) {
          ix = this.count - 1;
        }
      },
      remove: function(ix, ojml) {
        if (ix == null) {
          ix = this.count - 1;
        }
      },
      move: function(ixFrom, ixTo) {
        var ojml;
        ojml = this.remove(ixFrom);
        return this.addItem(ixTo, ojml);
      },
      clear: function() {
        var ix, _j, _ref1, _results;
        _results = [];
        for (ix = _j = _ref1 = this.items.length - 1; _j > 0; ix = _j += -1) {
          _results.push(this.remove(ix));
        }
        return _results;
      }
    }
  });

  oj.NumberList = function() {
    var _ref1;
    return (_ref1 = oj.List).call.apply(_ref1, [this, {
      ordered: true
    }].concat(__slice.call(arguments)));
  };

  oj.BulletList = function() {
    var _ref1;
    return (_ref1 = oj.List).call.apply(_ref1, [this, {
      ordered: false
    }].concat(__slice.call(arguments)));
  };

  oj.sandbox = {};

  _ref1 = _.keys(oj);
  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
    key = _ref1[_j];
    if (key.length > 0 && key[0] !== '_') {
      oj.addProperty(oj.sandbox, key, {
        value: oj[key],
        writable: false
      });
    }
  }

  oj.use = function(plugin, settings) {
    var name, pluginMap, value, _results;
    if (settings == null) {
      settings = {};
    }
    if (!oj.isFunction(plugin)) {
      throw new Error('oj.use: function expected for first argument');
    }
    if (!oj.isObject(settings)) {
      throw new Error('oj.use: object expected for second argument');
    }
    pluginMap = plugin(oj, settings);
    _results = [];
    for (name in pluginMap) {
      value = pluginMap[name];
      oj[name] = value;
      _results.push(oj.addProperty(oj.sandbox, name, {
        value: value,
        writable: false
      }));
    }
    return _results;
  };

  jqueryExtend = function(options) {
    if (options == null) {
      options = {};
    }
    _.defaults(options, {
      get: _.identity,
      set: _.identity
    });
    return function() {
      var $els, args, el, out, r, _k, _l, _len2, _len3;
      args = _.toArray(arguments);
      $els = $(this);
      if ((oj.isFunction(options.get)) && args.length === 0) {
        out = [];
        for (_k = 0, _len2 = $els.length; _k < _len2; _k++) {
          el = $els[_k];
          out.push(options.get($(el)));
        }
        if (out.length === 1) {
          return out[0];
        }
        return out;
      } else if (oj.isFunction(options.set)) {
        out = $els;
        for (_l = 0, _len3 = $els.length; _l < _len3; _l++) {
          el = $els[_l];
          r = options.set($(el), args);
          if (r != null) {
            return r;
          }
        }
        return $els;
      }
    };
  };

  $.fn.oj = jqueryExtend({
    set: function($el, args) {
      var d, dom, _k, _len2;
      if (args.length === 0) {
        return $el[0].oj;
      }
      dom = oj.toDOM.apply(oj, args);
      $el.html('');
      if (!oj.isArray(dom)) {
        dom = [dom];
      }
      for (_k = 0, _len2 = dom.length; _k < _len2; _k++) {
        d = dom[_k];
        $el.append(d);
      }
    },
    get: function($el) {
      return $el[0].oj;
    }
  });

  $.fn.ojValue = jqueryExtend({
    set: null,
    get: function($el, args) {
      var child, el, inst, text;
      el = $el[0];
      child = el.firstChild;
      switch (oj.typeOf(child)) {
        case 'text':
          return text = child.nodeValue;
        case 'element':
          if ((inst = _getInstanceOnElement(child)) != null) {
            return inst;
          } else {
            return child;
          }
      }
    }
  });

  plugins = {
    ojAfter: 'after',
    ojBefore: 'before',
    ojAppend: 'append',
    ojPrepend: 'prepend',
    ojReplaceWith: 'replaceWith',
    ojWrap: 'wrap',
    ojWrapInner: 'wrapInner'
  };

  _fn1 = function(ojName, jqName) {
    return $.fn[ojName] = jqueryExtend({
      set: function($el, args) {
        var dom;
        dom = oj.toDOM.apply(oj, args);
        $el[jqName](dom);
      },
      get: null
    });
  };
  for (ojName in plugins) {
    jqName = plugins[ojName];
    _fn1(ojName, jqName);
  }

}).call(this);
