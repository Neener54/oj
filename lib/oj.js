// Generated by CoffeeScript 1.3.3
(function() {
  var ArrayP, F, FuncP, ObjP, coffee, events, exports, fs, isCS, oj, root, slice, stripBOM, t, unshift, _, _chars, _compileAny, _compileDeeper, _compileTag, _defaultClear, _fn, _i, _len, _load, _loader, _loaderQueue, _randomInteger, _ref, _styleFromObject, _styleKeyFromFancy, _tagAttributes,
    __slice = [].slice;

  _load = function(evt, fn) {
    var prevOnLoad;
    if ((typeof $ !== "undefined" && $ !== null) && evt === 'ready') {
      $(fn);
    } else {
      if (document.readyState !== "complete") {
        prevOnLoad = window.onload;
        window.onload = function() {
          if (typeof prevOnLoad === "function") {
            prevOnLoad();
          }
          return fn();
        };
      } else {
        fn();
      }
    }
  };

  _loaderQueue = {
    ready: {
      queue: [],
      loaded: false
    },
    load: {
      queue: [],
      loaded: false
    }
  };

  _loader = function(evt) {
    return function(fn) {
      var f;
      if (_.isUndefined(fn)) {
        _loaderQueue[evt].loaded = true;
        while ((f = _loaderQueue[evt].queue.shift())) {
          _load(evt, f);
        }
      } else if (_loaderQueue[evt].loaded) {
        _load(evt, f);
      } else {
        _loaderQueue[evt].queue.push(fn);
      }
    };
  };

  oj = module.exports = function(page) {
    var compiled, html;
    compiled = oj.compile(require(page));
    html = compiled.html;
    if (html.indexOf('<html') !== 0) {
      throw new Error('oj: <html> element was not found');
    }
    html = html.slice((html.indexOf('>')) + 1, html.lastIndexOf('<'));
    (document.getElementsByTagName('html'))[0].innerHTML = html;
    compiled.js();
    oj.ready();
    return oj.load();
  };

  oj.ready = _loader('ready');

  oj.load = _loader('load');

  oj.id = function(len, chars) {
    return 'oj' + oj.guid(len, chars);
  };

  _randomInteger = function(min, max) {
    var diff, rnd;
    if (min === null || max === null || min > max) {
      return null;
    }
    diff = max - min;
    rnd = Math.floor(Math.random() * (diff + 1));
    return rnd + min;
  };

  _chars = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".split('');

  oj.guid = function(len, chars) {
    var base, charNext, charsPerRand, i, output, rand, randMax, randMin, _i;
    if (len == null) {
      len = 8;
    }
    if (chars == null) {
      chars = _chars;
    }
    base = chars.length;
    charsPerRand = Math.floor(Math.log(Math.pow(2, 31) - 1) / Math.log(base));
    randMin = 0;
    randMax = Math.pow(base, charsPerRand) - 1;
    output = "";
    for (i = _i = 0; 0 <= len ? _i < len : _i > len; i = 0 <= len ? ++_i : --_i) {
      if (i % charsPerRand === 0) {
        rand = _randomInteger(randMin, randMax);
      }
      charNext = chars[rand % base];
      output += charNext;
      rand = Math.floor(rand / base);
    }
    return output;
  };

  if (require.extensions) {
    coffee = require('coffee-script');
    fs = require(new String('fs'));
    stripBOM = function(c) {
      if (c.charCodeAt(0) === 0xFEFF) {
        return c.slice(1);
      } else {
        return c;
      }
    };
    isCS = function(code) {
      return -1 !== code.search(/(^\s*#|\n\s*#|-\>)/);
    };
    require.extensions['.oj'] = function(module, filepath) {
      var code;
      code = stripBOM(fs.readFileSync(filepath, 'utf8'));
      try {
        code = coffee.compile(code, {
          bare: true
        });
      } catch (eCoffee) {
        if (isCS(code)) {
          eCoffee.message = "(coffee-script error) " + filepath + ": " + eCoffee.message;
          throw eCoffee;
        }
      }
      try {
        code = "(function(){with(require('oj')){" + code + "}}).call(this);";
        module._compile(code, filepath);
      } catch (eJS) {
        eJS.message = "(javascript error) " + filepath + ": " + eJS.message;
        throw eJS;
      }
    };
  }

  root = this;

  oj.version = '0.0.7';

  oj.isClient = true;

  if (typeof module !== 'undefined') {
    exports = module.exports = oj;
  } else {
    root['oj'] = oj;
  }

  ArrayP = Array.prototype;

  FuncP = Function.prototype;

  ObjP = Object.prototype;

  slice = ArrayP.slice;

  unshift = ArrayP.unshift;

  oj.__ = _ = {};

  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  _.isNumber = function(obj) {
    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));
  };

  _.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  _.isDate = function(obj) {
    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);
  };

  _.isRegExp = function(obj) {
    return toString.call(obj) === '[object RegExp]';
  };

  _.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  _.isArray = Array.isArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  _.isCapitalLetter = function(c) {
    return !!(c.match(/[A-Z]/));
  };

  _.identity = function(v) {
    return v;
  };

  _.property = function(obj, options) {
    if (options == null) {
      options = {};
    }
    return Object.defineProperty(obj, options);
  };

  _.has = function(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  _.keys = Object.keys || function(obj) {
    var key, keys;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    keys = [];
    for (key in obj) {
      if (_has(obj, key)) {
        keys[keys.length] = key;
      }
    }
    return keys;
  };

  _.values = function(obj) {
    var out;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    out = [];
    _.each(obj, function(v) {
      return out.push(v);
    });
    return out;
  };

  _.flatten = function(array, shallow) {
    return _.reduce(array, (function(memo, value) {
      if (_.isArray(value)) {
        return memo.concat(shallow ? value : _.flatten(value));
      }
      memo[memo.length] = value;
      return memo;
    }), []);
  };

  _.reduce = function(obj, iterator, memo, context) {
    var ctor, initial;
    if (obj == null) {
      obj = [];
    }
    initial = arguments.length > 2;
    if (ArrayP.reduce && obj.reduce === ArrayP.reduce) {
      if (context) {
        iterator = _.bind(iterator, context);
      }
      if (initial) {
        return obj.reduce(iterator, memo);
      } else {
        return obj.reduce(iterator);
      }
    }
    _.each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        return initial = true;
      } else {
        return memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) {
      throw new TypeError('Reduce of empty array with no initial value');
    }
    memo;

    ctor = function() {};
    return _.bind = function(func, context) {
      var args, bound;
      if (func.bind === FuncP.bind && FuncP.bind) {
        return FuncP.bind.apply(func, slice.call(arguments, 1));
      }
      if (!_.isFunction(func)) {
        throw new TypeError;
      }
      args = slice.call(arguments, 2);
      return bound = function() {
        var result, self;
        if (!(this instanceof bound)) {
          return func.apply(context, args.concat(slice.call(arguments)));
        }
        ctor.prototype = func.prototype;
        self = new ctor;
        result = func.apply(self, args.concat(slice.call(arguments)));
        if (Object(result) === result) {
          return result;
        }
        return self;
      };
    };
  };

  _.sortedIndex = function(array, obj, iterator) {
    var high, low, mid;
    if (iterator == null) {
      iterator = _.identity;
    }
    low = 0;
    high = array.length;
    while (low < high) {
      mid = (low + high) >> 1;
      if (iterator(array[mid]) < iterator(obj)) {
        low = mid + 1;
      } else {
        high = mid;
      }
    }
    return low;
  };

  _.indexOf = function(array, item, isSorted) {
    var i, v, _i, _len;
    if (array == null) {
      return -1;
    }
    if (isSorted) {
      i = _.sortedIndex(array, item);
      if (array[i] === item) {
        return i;
      } else {
        return -1;
      }
    }
    if (ArrayP.indexOf && array.indexOf === ArrayP.indexOf) {
      return array.indexOf(item);
    }
    for (i = _i = 0, _len = array.length; _i < _len; i = ++_i) {
      v = array[i];
      if (v === item) {
        return i;
      }
    }
    return -1;
  };

  F = function() {};

  _.create = typeof Object.create === "function" ? Object.create : function(o) {
    var child;
    F.prototype = o;
    child = new F();
    F.prototype = null;
    return child;
  };

  _.getPrototypeOf = typeof Object.getPrototypeOf === "function" ? Object.getPrototypeOf : function(o) {
    return o.proto || o.constructor.prototype;
  };

  _.isjQuery = function(obj) {
    return !!(obj && obj.jquery);
  };

  _.isBackbone = function(obj) {
    return !!(obj && obj.on && obj.trigger && !_.isOJ(obj));
  };

  _.isOJ = function(obj) {
    return !!(obj != null ? obj._oj : void 0);
  };

  _.isEmpty = function(obj) {
    var k;
    if (_.isArray(obj)) {
      return obj.length === 0;
    }
    for (k in obj) {
      if (_.has(obj, k)) {
        return false;
      }
    }
    return true;
  };

  oj.typeOf = function(any) {
    var t;
    if (any === null) {
      return 'null';
    }
    t = typeof any;
    if (t === 'object') {
      if (_.isArray(any)) {
        t = 'array';
      } else if (_.isRegExp(any)) {
        t = 'regexp';
      } else if (_.isDate(any)) {
        t = 'date';
      } else if (_.isBackbone(any)) {
        t = 'backbone';
      } else if (_.isjQuery(any)) {
        t = 'jquery';
      } else if (_.isOJ(any)) {
        t = any._type;
      } else {
        t = 'object';
      }
    }
    return t;
  };

  _.isObject = function(obj) {
    return (oj.typeOf(obj)) === 'object';
  };

  _.clone = function(obj) {
    if (!_.isObject(obj)) {
      return obj;
    }
    if (_.isArray(obj)) {
      return obj.slice();
    } else {
      return _.extend({}, obj);
    }
  };

  oj["enum"] = function(name, args) {
    throw 'NYI';
  };

  _.breaker = {};

  _.each = function(col, iterator, context) {
    var i, k, v, _i, _len;
    if (col === null) {
      return;
    }
    if (ArrayP.forEach && col.forEach === ArrayP.forEach) {
      return col.forEach(iterator, context);
    } else if (_.isArray(col)) {
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        v = col[i];
        if (iterator.call(context, v, i, col) === _.breaker) {
          return _.breaker;
        }
      }
    } else {
      for (k in col) {
        v = col[k];
        if (_.has(col, k)) {
          if (iterator.call(context, v, k, col) === _.breaker) {
            return _.breaker;
          }
        }
      }
    }
  };

  _.map = function(obj, iterator, options) {
    var context, evaluate, iterator_, k, out, r, recurse, v;
    if (options == null) {
      options = {};
    }
    context = options.context;
    recurse = options.recurse;
    evaluate = options.evaluate;
    iterator_ = iterator;
    if (recurse) {
      (function(options) {
        return iterator_ = function(v, k, o) {
          var options_;
          options_ = _.extend(_.clone(options), {
            key: k,
            object: v
          });
          return _.map(v, iterator, options_);
        };
      })(options);
    }
    if (_.isFunction(obj)) {
      if (!evaluate) {
        return obj;
      }
      while (evaluate && _.isFunction(obj)) {
        obj = obj();
      }
    }
    out = obj;
    if (_.isArray(obj)) {
      out = [];
      if (!obj) {
        return out;
      }
      if (ArrayP.map && obj.map === ArrayP.map) {
        return obj.map(iterator_, context);
      }
      _.each(obj, (function(v, ix, list) {
        return out[out.length] = iterator_.call(context, v, ix, list);
      }));
      if (obj.length === +obj.length) {
        out.length = obj.length;
      }
    } else if (_.isObject(obj)) {
      out = {};
      if (!obj) {
        return out;
      }
      for (k in obj) {
        v = obj[k];
        if ((r = iterator_.call(context, v, k, obj)) !== void 0) {
          out[k] = r;
        }
      }
    } else {
      return iterator.call(context, obj, options.key, options.object);
    }
    return out;
  };

  _.extend = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var key, value, _results;
      _results = [];
      for (key in source) {
        value = source[key];
        _results.push(obj[key] = value);
      }
      return _results;
    }));
    return obj;
  };

  _.defaults = function(obj) {
    _.each(slice.call(arguments, 1), (function(source) {
      var prop, _results;
      _results = [];
      for (prop in source) {
        if (!(obj[prop] != null)) {
          _results.push(obj[prop] = source[prop]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }));
    return obj;
  };

  _.uniqueSort = function(array, isSorted) {
    var item, ix, out, _i, _len;
    if (isSorted == null) {
      isSorted = false;
    }
    if (!isSorted) {
      array.sort();
    }
    out = [];
    for (ix = _i = 0, _len = array.length; _i < _len; ix = ++_i) {
      item = array[ix];
      if (ix > 0 && array[ix - 1] === array[ix]) {
        continue;
      }
      out.push(item);
    }
    return out;
  };

  _.uniqueSortedUnion = function(array, array2) {
    return _.uniqueSort(array.concat(array2));
  };

  oj.partial = function(module, json) {
    var m;
    m = require(module);
    if ((_.isFunction(m)) && arguments.length > 1) {
      return m.apply(null, arguments.slice(1));
    }
    return m;
  };

  oj._result = null;

  oj.tag = function() {
    var arg, args, attributes, lastResult, len, name, ojml, r, _i, _j, _len, _len1;
    name = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    if (!_.isString(name)) {
      throw 'oj.tag error: argument 1 is not a string (expected tag name)';
    }
    ojml = [name];
    attributes = {};
    for (_i = 0, _len = args.length; _i < _len; _i++) {
      arg = args[_i];
      if (_.isObject(arg)) {
        _.extend(attributes, arg);
      }
    }
    attributes = _tagAttributes(name, attributes);
    if (!_.isEmpty(attributes)) {
      ojml.push(attributes);
    }
    lastResult = oj._result;
    for (_j = 0, _len1 = args.length; _j < _len1; _j++) {
      arg = args[_j];
      if (_.isObject(arg)) {
        continue;
      } else if (_.isFunction(arg)) {
        oj._result = ojml;
        len = ojml.length;
        r = arg();
        if (len === ojml.length && (r != null)) {
          ojml.push(r);
        }
      } else {
        ojml.push(arg);
      }
    }
    oj._result = lastResult;
    if (oj._result) {
      oj._result.push(ojml);
    }
    return ojml;
  };

  oj.tag.elements = {
    closed: 'a abbr acronym address applet article aside audio b bdo big blockquote body button canvas caption center cite code colgroup command datalist dd del details dfn dir div dl dt em embed fieldset figcaption figure font footer form frameset h1 h2 h3 h4 h5 h6 head header hgroup html i iframe ins keygen kbd label legend li map mark menu meter nav noframes noscript object ol optgroup option output p pre progress q rp rt ruby s samp script section select small source span strike strong style sub summary sup table tbody td textarea tfoot th thead time title tr tt u ul var video wbr xmp'.split(' '),
    open: 'area base br col command embed hr img input keygen link meta param source track wbr'.split(' ')
  };

  oj.tag.elements.all = (oj.tag.elements.closed.concat(oj.tag.elements.open)).sort();

  oj.tag.isClosed = function(tag) {
    return (_.indexOf(oj.tag.elements.open, tag, true)) === -1;
  };

  _ref = oj.tag.elements.all;
  _fn = function(t) {
    return oj[t] = function() {
      return oj.tag.apply(oj, [t].concat(__slice.call(arguments)));
    };
  };
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    t = _ref[_i];
    _fn(t);
  }

  _defaultClear = function(dest, d, e) {
    var k;
    _.defaults(dest, d);
    for (k in e) {
      dest[k] = null;
    }
    return dest;
  };

  _tagAttributes = function(name, attributes) {
    var attr;
    attr = _.clone(attributes);
    switch (name) {
      case 'link':
        _defaultClear(attr, {
          rel: 'stylesheet',
          type: 'text/css',
          href: attr.url || attr.src
        }, {
          url: 0,
          src: 0
        });
        break;
      case 'script':
        _defaultClear(attr, {
          type: 'text/javascript',
          src: attr.url
        }, {
          url: 0
        });
        break;
      case 'a':
        _defaultClear(attr, {
          href: attr.url
        }, {
          url: 0
        });
    }
    return attr;
  };

  oj.extend = function(context) {
    var k, o, v;
    o = {};
    for (k in oj) {
      v = oj[k];
      if (k[0] !== '_') {
        o[k] = v;
      }
    }
    delete o.extend;
    return _.extend(context, o);
  };

  oj.compile = function(options, ojml) {
    var el, html, out, _ref1;
    if (_.isArray(options)) {
      ojml = options;
      options = {};
    }
    options = _.defaults({}, options, {
      html: true,
      dom: false,
      debug: false
    });
    options.html = options.html ? [] : null;
    options.dom = options.dom ? [] : null;
    options.js = [];
    options.types = [];
    options.indent = '';
    _compileAny(ojml, options);
    html = (_ref1 = options.html) != null ? _ref1.join('') : void 0;
    if ((typeof document !== "undefined" && document !== null) && (options.dom != null)) {
      el = document.createElement('div');
      el.innerHTML = html;
      options.dom = el.firstChild;
    }
    out = {
      html: html,
      types: options.types,
      dom: options.dom,
      js: function() {
        var fn, _j, _k, _len1, _len2, _ref2, _ref3;
        _ref2 = options.js;
        for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
          fn = _ref2[_j];
          fn();
        }
        _ref3 = options.types;
        for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
          t = _ref3[_k];
          t.awaken();
        }
        return void 0;
      }
    };
    return out;
  };

  _styleKeyFromFancy = function(key) {
    var c, out, _j, _len1;
    out = "";
    for (_j = 0, _len1 = key.length; _j < _len1; _j++) {
      c = key[_j];
      if (_.isCapitalLetter(c)) {
        out += "-" + (c.toLowerCase());
      } else {
        out += c;
      }
    }
    return out;
  };

  _styleFromObject = function(obj) {
    var first, k, kFancy, out, _j, _len1, _ref1;
    out = "";
    first = true;
    _ref1 = _.keys(obj).sort();
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      kFancy = _ref1[_j];
      k = _styleKeyFromFancy(kFancy);
      if (!first) {
        out += ';';
      }
      out += "" + k + ":" + obj[kFancy];
      first = false;
    }
    return out;
  };

  _compileDeeper = function(method, ojml, options) {
    var i;
    i = options.indent;
    options.indent += '\t';
    method(ojml, options);
    return options.indent = i;
  };

  _compileAny = function(ojml, options) {
    var _ref1, _ref2, _ref3;
    switch (oj.typeOf(ojml)) {
      case 'array':
        _compileTag(ojml, options);
        break;
      case 'oj':
        _compileAny(ojml.oj(), options);
        break;
      case 'jquery':
        if ((_ref1 = options.html) != null) {
          _ref1.push(ojml[0].outerHTML);
        }
        break;
      case 'string':
        if ((_ref2 = options.html) != null) {
          _ref2.push(ojml);
        }
        break;
      case 'boolean':
      case 'number':
        if ((_ref3 = options.html) != null) {
          _ref3.push("" + ojml);
        }
        break;
      case 'function':
        _compileAny(ojml(), options);
    }
  };

  events = {
    bind: 1,
    on: 1,
    off: 1,
    live: 1,
    blur: 1,
    change: 1,
    click: 1,
    dblclick: 1,
    focus: 1,
    focusin: 1,
    focusout: 1,
    hover: 1,
    keydown: 1,
    keypress: 1,
    keyup: 1,
    mousedown: 1,
    mouseenter: 1,
    mousemove: 1,
    mouseout: 1,
    mouseup: 1,
    ready: 1,
    resize: 1,
    scroll: 1,
    select: 1
  };

  _compileTag = function(ojml, options) {
    var attr, attributes, child, children, k, tag, v, _fn1, _j, _k, _l, _len1, _len2, _len3, _ref1, _ref2, _ref3, _ref4, _ref5;
    tag = ojml[0];
    if (!(_.isString(tag) && tag.length > 0)) {
      throw new Error('oj.compile: tag is missing in array');
    }
    if (_.isCapitalLetter(tag[0])) {
      return _compileDeeper(_compileAny, new oj[tag](ojml.slice(1)), options);
    }
    attributes = null;
    if (_.isObject(ojml[1])) {
      attributes = ojml[1];
    }
    children = attributes ? ojml.slice(2) : ojml.slice(1);
    if (options.html) {
      if (_.isObject(attributes != null ? attributes.style : void 0)) {
        attributes.style = _styleFromObject(attributes.style);
      }
      if ((attributes != null ? attributes.c : void 0) != null) {
        attributes["class"] = attributes.c;
        attributes.c = null;
      }
      if (_.isArray(attributes != null ? attributes["class"] : void 0)) {
        attributes["class"] = attributes.join(' ');
      }
      attr = "";
      if (attributes) {
        _fn1 = function(k, v) {
          var _ref1, _ref2;
          if (events[k] != null) {
            if ((_ref1 = attributes.id) == null) {
              attributes.id = oj.id();
            }
            if (typeof $ !== "undefined" && $ !== null) {
              if ((_ref2 = options.js) != null) {
                _ref2.push(function() {
                  var $el;
                  $el = $('#' + attributes.id);
                  if (_.isArray(v)) {
                    $el[k].apply(this, v);
                  } else {
                    $el[k](v);
                  }
                });
              }
            }
            attributes[k] = null;
          }
        };
        for (k in attributes) {
          v = attributes[k];
          _fn1(k, v);
        }
        _ref1 = _.keys(attributes).sort();
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          k = _ref1[_j];
          if ((v = attributes[k]) != null) {
            attr += " " + k + "=\"" + v + "\"";
          }
        }
      }
      if ((_ref2 = options.html) != null) {
        _ref2.push("<" + tag + attr + ">");
      }
    }
    if (children.length > 1) {
      for (_k = 0, _len2 = children.length; _k < _len2; _k++) {
        child = children[_k];
        if (options.debug) {
          if ((_ref3 = options.html) != null) {
            _ref3.push("\n\t" + options.indent);
          }
        }
        _compileDeeper(_compileAny, child, options);
      }
      if (options.debug) {
        if ((_ref4 = options.html) != null) {
          _ref4.push("\n" + options.indent);
        }
      }
    } else {
      for (_l = 0, _len3 = children.length; _l < _len3; _l++) {
        child = children[_l];
        _compileDeeper(_compileAny, child, options);
      }
    }
    if (children.length > 0 || oj.tag.isClosed(tag)) {
      return (_ref5 = options.html) != null ? _ref5.push("</" + tag + ">") : void 0;
    }
  };

  oj.addMethods = function(obj, mapNameToMethod) {
    var method, methodName;
    for (methodName in mapNameToMethod) {
      method = mapNameToMethod[methodName];
      oj.addMethod(obj, methodName, method);
    }
  };

  oj.addMethod = function(obj, methodName, method) {
    if (!_.isString(methodName)) {
      throw 'oj.addMethod: string expected for second argument';
    }
    if (!_.isFunction(method)) {
      throw 'oj.addMethod: function expected for thrid argument';
    }
    Object.defineProperty(obj, methodName, {
      value: method,
      enumerable: false,
      writable: false,
      configurable: true
    });
  };

  oj.removeMethod = function(obj, methodName) {
    if (!_.isString(methodName)) {
      throw 'oj.removeMethod: string expected for second argument';
    }
    delete obj[methodName];
  };

  oj.addProperties = function(obj, mapNameToInfo) {
    var propInfo, propName;
    for (propName in mapNameToInfo) {
      propInfo = mapNameToInfo[propName];
      if (!((propInfo != null ? propInfo.get : void 0) != null) && !((propInfo != null ? propInfo.value : void 0) != null)) {
        propInfo = {
          value: propInfo
        };
      }
      oj.addProperty(obj, propName, propInfo);
    }
  };

  oj.addProperty = function(obj, propName, propInfo) {
    if (!_.isString(propName)) {
      throw 'oj.addProperty: string expected for second argument';
    }
    if (!(_.isObject(propInfo))) {
      throw 'oj.addProperty: object expected for third argument';
    }
    if (!((propInfo.get != null) || (propInfo.value != null))) {
      throw 'oj.addProperty: get or value key expected in third argument';
    }
    _.defaults(propInfo, {
      enumerable: true,
      configurable: true
    });
    if (obj[propName] != null) {
      oj.removeProperty(obj, propName);
    }
    Object.defineProperty(obj, propName, propInfo);
  };

  oj.removeProperty = function(obj, propName) {
    if (!_.isString(propName)) {
      throw 'oj.addProperty: string expected for second argument';
    }
    return delete obj[propName];
  };

  oj.isProperty = function(obj, propName) {
    if (!_.isString(propName)) {
      throw 'oj.isProperty: string expected for second argument';
    }
    return Object.getOwnPropertyDescriptor(obj, propName).get != null;
  };

  oj.copyProperty = function(dest, source, propName) {
    var info;
    info = Object.getOwnPropertyDescriptor(source, propName);
    return Object.defineProperty(dest, propName, info);
  };

  _.inherit = function(child, parent) {
    var ctor, key;
    for (key in parent) {
      oj.copyProperty(child, parent, key);
    }
    ctor = function() {};
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
    child.prototype["super"] = parent.prototype;
  };

  oj.type = function(name, args) {
    var Out, methodKeys, propKeys, typeProps, _methods, _properties, _ref1, _ref2, _ref3, _ref4;
    if (args == null) {
      args = {};
    }
    if (!_.isString(name)) {
      throw 'oj.type: string expected for first argument';
    }
    if (!_.isObject(args)) {
      throw 'oj.type: object expected for second argument';
    }
    if ((_ref1 = args.methods) == null) {
      args.methods = {};
    }
    if ((_ref2 = args.properties) == null) {
      args.properties = {};
    }
    if ((_ref3 = args.constructor) == null) {
      args.constructor = function() {};
    }
    Out = new Function("return function " + name + "(){\n  var _this = this;\n  if ( !(this instanceof " + name + ") )\n    _this = new " + name + ";\n\n  _this.foo = 'foo';\n  " + name + ".prototype.constructor.apply(_this, arguments);\n\n  return _this;\n}")();
    if ((_ref4 = args["extends"]) == null) {
      args["extends"] = args.inherits;
    }
    if (args["extends"] != null) {
      _.inherit(Out, args["extends"]);
    }
    oj.addMethod(Out.prototype, 'constructor', function() {
      if (args["extends"] != null) {
        args["extends"].prototype.constructor.apply(this, arguments);
      }
      try {
        args.constructor.apply(this, arguments);
      } catch (e) {
        console.error("oj: " + name + ".constructor failed with: ", e);
        throw e;
      }
      return this;
    });
    typeProps = {
      _type: {
        value: name,
        writable: false,
        enumerable: false
      },
      _oj: {
        value: true,
        writable: false,
        enumerable: false
      }
    };
    oj.addProperties(Out, typeProps);
    oj.addProperties(Out.prototype, typeProps);
    propKeys = (_.keys(args.properties)).sort();
    if (Out.prototype._properties != null) {
      propKeys = _.uniqueSortedUnion(Out.prototype._properties, propKeys);
    }
    _properties = {
      value: propKeys,
      writable: false,
      enumerable: false
    };
    oj.addProperty(Out, '_properties', _properties);
    oj.addProperty(Out.prototype, '_properties', _properties);
    methodKeys = (_.keys(args.methods)).sort();
    if (Out.prototype._methods != null) {
      methodKeys = _.uniqueSortedUnion(Out.prototype._methods, methodKeys);
    }
    _methods = {
      value: methodKeys,
      writable: false,
      enumerable: false
    };
    oj.addProperty(Out, '_methods', _methods);
    oj.addProperty(Out.prototype, '_methods', _methods);
    _.extend(args.methods, {
      set: function(k, v) {
        var key, obj, value;
        obj = k;
        if (!_.isObject(k)) {
          obj = {};
          obj[k] = v;
        }
        for (key in obj) {
          value = obj[key];
          this[key] = value;
        }
      },
      toJSON: function() {
        var json, prop, _j, _len1, _ref5;
        json = {};
        _ref5 = this._properties;
        for (_j = 0, _len1 = _ref5.length; _j < _len1; _j++) {
          prop = _ref5[_j];
          json[prop] = this[prop];
        }
        return json;
      },
      toString: function() {
        throw 'toString NYI';
      }
    });
    oj.addMethods(Out.prototype, args.methods);
    oj.addProperties(Out.prototype, args.properties);
    return Out;
  };

  oj.view = function(name, args) {
    var _ref1;
    if (!_.isString(name)) {
      throw 'oj.view: string expected for first argument';
    }
    if (!_.isObject(args)) {
      throw 'oj.view: object expected for second argument';
    }
    if ((_ref1 = args["extends"]) == null) {
      args["extends"] = oj.View;
    }
    return oj.type(name, args);
  };

  oj.View = oj.type('View', {
    constructor: function() {},
    properties: {
      element: {
        get: function() {
          var ojml, result;
          if (this._element) {
            return this._element;
          } else {
            ojml = this.make();
            result = oj.compile({
              dom: true
            }, ojml).dom;
            return this._element = result;
          }
        }
      },
      set: function(v) {
        var _element;
        return _element = v;
      },
      $element: {
        get: function() {
          return $(this.element);
        }
      },
      el: {
        get: function() {
          return this.element;
        },
        $el: {
          get: function() {
            return this.$element;
          }
        }
      },
      hidden: {
        get: function() {
          return $el.css('display') === 'none';
        },
        set: function(v) {
          if (v) {
            return $el.hide();
          } else {
            return $el.show();
          }
        }
      }
    },
    methods: {
      make: function() {
        return oj.div({
          c: "oj." + (oj.typeOf(this)),
          id: oj.id()
        });
      },
      $: function() {
        var _ref1;
        return (_ref1 = this.$el).find.apply(_ref1, arguments);
      },
      hide: function() {
        return this.$el.hide();
      },
      show: function() {
        return this.$el.show();
      },
      toString: function() {
        return this.element.outerHTML;
      },
      detach: function() {
        throw 'detach nyi';
      },
      attach: function() {
        throw 'attach nyi';
      }
    }
  });

  oj.Checkbox = oj.type('Checkbox', {
    "extends": oj.View,
    constructor: function() {
      return this.set.apply(this, arguments);
    },
    properties: {
      make: function() {
        return oj.input({
          id: oj.id(),
          c: 'oj.Checkbox',
          type: 'checkbox'
        });
      },
      value: {
        get: function() {
          return this.el.checked;
        },
        set: function(v) {
          return this.el.checked = v;
        }
      },
      disabled: {
        get: function() {
          return this.el.disabled;
        },
        set: function(v) {
          return this.el.disabled = v;
        }
      }
    },
    methods: {
      testMethod: function() {}
    }
  });

  oj.replace = function(el, ojml) {
    var template;
    if (_.isjQuery(el)) {
      el = el.get(0);
    }
    template = oj.template(ojml);
    _.domReplaceHtml(el, template.html);
    return template.js();
  };

  _.domInsertElementAfter = function(elLocation, elToInsert) {
    var elNext, elParent;
    if (!elLocation) {
      throw new Error("domInsertElementAfter error: elementLocation is null");
    }
    if (!elToInsert) {
      throw new Error("domInsertElementAfter error: elementToInsert is null");
    }
    elNext = elLocation.nextSibling;
    elParent = elLocation.parentNode;
    if (elNext) {
      return elParent.insertBefore(elToInsert, elNext);
    } else {
      return elParent.appendChild(elToInsert);
    }
  };

  _.domReplaceHtml = function(el, html) {
    var nextSibling, parent;
    if (!el) {
      throw new Error("domReplaceHtml error: element is null");
    }
    nextSibling = el.nextSibling;
    parent = el.parentNode;
    parent.removeChild(el);
    el.innerHTML = html;
    if (nextSibling) {
      return parent.insertBefore(el, nextSibling);
    } else {
      return parent.appendChild(el);
    }
  };

  _.domAppendHtml = function(el, html) {
    var elTemp;
    if (!el) {
      throw new Error("oj.domAppendHtml: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    while (elTemp.childNodes.length) {
      el.appendChild(elTemp.childNodes[0]);
    }
    return elTemp = void 0;
  };

  _.domPrependHtml = function(el, html) {
    var elTemp;
    if (!el) {
      throw new Error("oj.domPrependHtml: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    while (elTemp.childNodes.length) {
      el.insertBefore(elTemp.childNodes[elTemp.childNodes.length - 1], el.childNodes[0]);
    }
    return elTemp = void 0;
  };

  _.domInsertHtmlBefore = function(el, html) {
    var elTemp, parent;
    if (!el) {
      throw new Error("oj.domInsertHtmlBefore: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    parent = el.parentNode;
    while (elTemp.childNodes.length) {
      parent.insertBefore(elTemp.childNodes[elTemp.childNodes.length - 1], el);
    }
    return elTemp = void 0;
  };

  _.domInsertHtmlAfter = function(el, html) {
    var elBefore, elBeforeNext, elTemp;
    if (!el) {
      throw new Error("oj.domInsertHtmlAfter: element is null");
    }
    elTemp = document.createElement('div');
    elTemp.innerHTML = html;
    elBefore = el;
    while (elTemp.childNodes.length) {
      elBeforeNext = elTemp.childNodes[0];
      _.domInsertElementAfter(elBefore, elTemp.childNodes[0]);
      elBefore = elBeforeNext;
    }
    return elTemp = void 0;
  };

}).call(this);
