// Generated by CoffeeScript 1.3.3
(function() {
  var commander, compile, error, fs, isDirectory, isFile, oj, path, success, trimArgList, watch, _;

  _ = require('underscore');

  commander = require('commander');

  path = require('path');

  fs = require('fs');

  oj = require('./oj.js');

  module.exports = function() {
    var appDir, dirType, dirTypeOption, fileName, filePath, ix, _i, _j, _len, _len1, _ref, _ref1, _results;
    commander.version('0.0.3').usage('[options] <file ...>').option('-v, --verbose', 'Turn on verbose output (default: off)').option('-o, --output <dir>', 'Directory to output all files to (default: current)', process.cwd()).option('    --output-css <dir>', 'Directory to output css files to (default: current)').option('    --output-js <dir>', 'Directory to output js files to (default: current)').option('    --output-html <dir>', 'Directory to output css files to (default: current)').option('-w, --watch <dir,dir,...>', '(NYI) Directories to watch (default: off)', trimArgList).parse(process.argv);
    if (!isDirectory(commander.output)) {
      error("directory expected for --output option (" + commander.output + ")");
    }
    dirTypeOption = ['--output-css', '--output-js', '--output-html'];
    _ref = ['outputCss', 'outputJs', 'outputHtml'];
    for (ix = _i = 0, _len = _ref.length; _i < _len; ix = ++_i) {
      dirType = _ref[ix];
      if (!commander[dirType]) {
        commander[dirType] = commander.output;
      }
      if (!isDirectory(commander[dirType])) {
        error("directory expected at " + dirTypeOption[ix] + " option (" + commander[dirType] + ")");
      }
    }
    commander.files = commander.args;
    if (!_.isArray(commander.files) || commander.files.length === 0) {
      error('expecting one or more files');
    }
    appDir = process.cwd();
    _ref1 = commander.files;
    _results = [];
    for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
      fileName = _ref1[_j];
      filePath = path.join(appDir, fileName);
      console.log("filePath: ", filePath);
      if (!isFile(filePath)) {
        _results.push(error("file not found (" + filePath + ")"));
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  compile = function(files, options) {
    if (options == null) {
      options = {};
    }
    console.log("compile called: ", options);
    return oj.compile(files, options);
  };

  watch = function(directories, options) {
    if (options == null) {
      options = {};
    }
    return console.log("watch called: (NYI)");
  };

  error = function(message, exitCode) {
    if (exitCode == null) {
      exitCode = 1;
    }
    console.log('oj: ', message);
    return process.exit(exitCode);
  };

  success = function(message) {
    return error(message, 0);
  };

  isFile = function(path) {
    try {
      return (fs.statSync(path)).isFile();
    } catch (e) {
      return false;
    }
  };

  isDirectory = function(path) {
    try {
      return (fs.statSync(path)).isDirectory();
    } catch (e) {
      return false;
    }
  };

  trimArgList = function(v) {
    return _.trim(v.split(','));
  };

  _.trim = function(any) {
    var out;
    if (_.isString(any)) {
      return any.trim();
    } else if (_.isArray(any)) {
      out = _.map(any, function(v) {
        return v.trim();
      });
      return _.reject(out, (function(v) {
        return v === '' || v === null;
      }));
    } else {
      return any;
    }
  };

}).call(this);
