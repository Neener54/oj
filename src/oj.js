// Generated by CoffeeScript 1.3.3
(function() {
  var oj, _;

  oj = module.exports;

  oj.version = '0.0.0';

  oj._ = _ = {};

  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  _.isNumber = function(obj) {
    return !!(obj === 0 || (obj && obj.toExponential && obj.toFixed));
  };

  _.isString = function(obj) {
    return !!(obj === '' || (obj && obj.charCodeAt && obj.substr));
  };

  _.isDate = function(obj) {
    return !!(obj && obj.getTimezoneOffset && obj.setUTCFullYear);
  };

  _.isRegExp = function(obj) {
    return toString.call(obj) === '[object RegExp]';
  };

  _.isFunction = function(obj) {
    return typeof obj === 'function';
  };

  _.isArray = Array.isArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  _.has = function(obj, key) {
    return Object.prototype.hasOwnProperty.call(obj, key);
  };

  _.keys = Object.keys || function(obj) {
    var key, keys;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    keys = [];
    for (key in obj) {
      if (_has(obj, key)) {
        keys[keys.length] = key;
      }
    }
    return keys;
  };

  _.values = function(obj) {
    var out;
    if (obj !== Object(obj)) {
      throw 'Invalid object';
    }
    out = [];
    _.each(obj, function(v) {
      return out.push(v);
    });
    return out;
  };

  _.isjQuery = function(obj) {
    return !!(obj && obj.jquery);
  };

  _.isBackbone = function(obj) {
    return !!(obj && obj.on && obj.trigger && !_.isOJ(obj));
  };

  _.isOJ = function(obj) {
    return !!(obj && _.isString(obj.ojtype));
  };

  _.isOJML = function(obj) {
    return !!(obj && _.isString(obj.oj));
  };

  _.typeOf = function(any) {
    var t;
    if (any === null) {
      return 'null';
    }
    t = typeof any;
    if (t === 'object') {
      if (_.isArray(any)) {
        t = 'array';
      } else if (_.isRegExp(any)) {
        t = 'regexp';
      } else if (_.isDate(any)) {
        t = 'date';
      } else if (_.isBackbone(any)) {
        t = 'backbone';
      } else if (_.isjQuery(any)) {
        t = 'jquery';
      } else if (_.isOJML(any)) {
        t = 'ojml';
      } else if (_.isOJ(any)) {
        t = any.ojtype;
      } else {
        t = 'object';
      }
    }
    return t;
  };

  _.isObject = function(obj) {
    return (_.typeOf(obj)) === 'object';
  };

  _.clone = function(obj) {
    if (!_.isObject(obj)) {
      return obj;
    }
    if (_.isArray(obj)) {
      return obj.slice();
    } else {
      return _.extend({}, obj);
    }
  };

  _.breaker = {};

  _.each = function(col, iterator, context) {
    var i, k, v, _i, _len;
    if (col === null) {
      return;
    }
    if (Array.prototype.forEach && col.forEach === Array.prototype.forEach) {
      return col.forEach(iterator, context);
    } else if (_.isArray(col)) {
      for (i = _i = 0, _len = col.length; _i < _len; i = ++_i) {
        v = col[i];
        if (iterator.call(context, v, i, col) === _.breaker) {
          return _.breaker;
        }
      }
    } else {
      for (k in col) {
        v = col[k];
        if (_.has(col, k)) {
          if (iterator.call(context, v, k, col) === _.breaker) {
            return _.breaker;
          }
        }
      }
    }
  };

  _.map = function(obj, iterator, options) {
    var context, evaluate, iterator_, k, out, r, recurse, v;
    if (options == null) {
      options = {};
    }
    context = options.context;
    recurse = options.recurse;
    evaluate = options.evaluate;
    iterator_ = iterator;
    if (recurse) {
      console.log('map2 option.recurse is true');
      (function(options) {
        var options_;
        options_ = _.clone(options);
        return iterator_ = function(v, k, o) {
          var options__;
          console.log('iterator_ called with v: ', v, ' k: ', k);
          options__ = _.extend(_.clone(options_), {
            key: k,
            object: v
          });
          return _.map(v, iterator, options__);
        };
      })(options);
    }
    if (_.isFunction(obj)) {
      if (!evaluate) {
        return obj;
      }
      console.log('map2 found a function');
      while (evaluate && _.isFunction(obj)) {
        obj = obj();
      }
    }
    out = obj;
    if (_.isArray(obj)) {
      out = [];
      if (!obj) {
        return out;
      }
      if (Array.prototype.map && obj.map === Array.prototype.map) {
        return obj.map(iterator_, context);
      }
      console.log('map found array');
      _.each(obj, (function(v, ix, list) {
        return out[out.length] = iterator_.call(context, v, ix, list);
      }));
      if (obj.length === +obj.length) {
        out.length = obj.length;
      }
    } else if (_.isObject(obj)) {
      out = {};
      if (!obj) {
        return out;
      }
      for (k in obj) {
        v = obj[k];
        if ((r = iterator_.call(context, v, k, obj)) !== void 0) {
          out[k] = r;
        }
      }
    } else {
      console.log('map2 found value: ', obj);
      return iterator.call(context, obj, options.key, options.object);
    }
    return out;
  };

  _.extend = function(obj) {
    _.each(Array.prototype.slice.call(arguments, 1), (function(source) {
      var key, value, _results;
      _results = [];
      for (key in source) {
        value = source[key];
        _results.push(obj[key] = value);
      }
      return _results;
    }));
    return obj;
  };

  _.defaults = function(obj) {
    _.each(Array.prototype.slice.call(arguments, 1), (function(source) {
      var prop, _results;
      _results = [];
      for (prop in source) {
        if (!(obj[prop] != null)) {
          _results.push(obj[prop] = source[prop]);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    }));
    return obj;
  };

  oj.tag = function(name, attributes, contents) {
    var ojml;
    if (!_.isString(name)) {
      throw 'oj.tag error: argument 1 is not a string (expected tag name)';
    }
    if (!_.isObject(attributes)) {
      contents.unshift(attributes);
    }
    ojml = {
      oj: name
    };
    return ojml;
  };

  oj.extend = function(context) {
    var k, o, v;
    o = {};
    for (k in oj) {
      v = oj[k];
      if (k[0] !== '_') {
        o[k] = v;
      }
    }
    delete o.extend;
    return _.extend(context, o);
  };

}).call(this);
